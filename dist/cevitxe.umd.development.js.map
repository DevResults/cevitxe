{"version":3,"file":"cevitxe.umd.development.js","sources":["../src/constants.ts","../src/adaptReducer.ts","../src/initialize.ts","../src/actions.ts","../src/mockCrypto.ts","../src/feed.ts","../src/index.ts"],"sourcesContent":["export const APPLY_CHANGE = 'cevitxe/APPLY_CHANGE';\r\n","import { ReducerAdapter } from './types'\r\nimport automerge from 'automerge'\r\nimport { APPLY_CHANGE } from './constants'\r\n\r\nexport const adaptReducer: ReducerAdapter = proxyReducer => (\r\n  state,\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case APPLY_CHANGE: {\r\n      //return state\r\n      console.log('APPLY_CHANGE REDUCER!!!!', payload)\r\n      const { change } = payload\r\n      let startingState = state\r\n      if (change.message === 'initialize') {\r\n        startingState = automerge.init()\r\n        console.log('found initialize', change)\r\n      }\r\n      const newState = automerge.applyChanges(startingState, [change])\r\n      console.log(newState)\r\n      return newState\r\n    }\r\n    default: {\r\n      const msg = `${type}: ${JSON.stringify(payload)}`\r\n      const fn = proxyReducer({ type, payload })\r\n      return fn && state\r\n        ? automerge.change(state, msg, fn) // return a modified Automerge object\r\n        : state // no matching change function was found, return state unchanged\r\n    }\r\n  }\r\n}\r\n","import automerge from 'automerge'\r\n\r\n// Builds a new automerge object from the object provided\r\nexport const initialize = <T>(obj: T) =>\r\n  automerge.change(automerge.init<T>(), 'initialize', (d: T) => {\r\n    for (const k in obj) {\r\n      d[k] = obj[k]\r\n    }\r\n  })\r\n","import { Change } from './types'\r\nimport { APPLY_CHANGE } from './constants'\r\n\r\nexport const actions = {\r\n  applyChange: (change: Change) => ({\r\n    type: APPLY_CHANGE,\r\n    payload: { change, fromCevitxe: true },\r\n  }),\r\n}\r\n","import crypto from 'hypercore-crypto';\r\n// TODO: Get crypto working properly\r\n// This is a hack because I was getting errors verifying the remove signature\r\n// I took the code from hypercore and am just always returning true for the verification\r\n// We need to look deeper into why it's not signing properly or maybe just provide our\r\n// own crypto methods here.\r\nexport const mockCrypto = {\r\n  sign: (data: any, sk: any, cb: any) => {\r\n    return cb(null, crypto.sign(data, sk));\r\n  },\r\n  verify: (_sig: any, _data: any, _pk: any, cb: any) => {\r\n    // Always say it's a valid signature (for testing)\r\n    return cb(null, true);\r\n  },\r\n};\r\n","import automerge from 'automerge'\r\nimport { Buffer } from 'buffer'\r\nimport hypercore from 'hypercore'\r\nimport crypto from 'hypercore-crypto'\r\nimport pump from 'pump'\r\nimport rai from 'random-access-idb'\r\n//import reduceReducers from 'reduce-reducers'\r\nimport {\r\n  //Action,\r\n  applyMiddleware,\r\n  createStore as reduxCreateStore,\r\n  //DeepPartial,\r\n  Middleware,\r\n  Reducer,\r\n  Store,\r\n  //Store,\r\n  //StoreEnhancer,\r\n} from 'redux'\r\nimport signalhub from 'signalhub'\r\nimport swarm from 'webrtc-swarm'\r\n//import { adaptReducer } from './adaptReducer'\r\nimport { initialize } from './initialize'\r\nimport { actions } from './actions'\r\nimport { mockCrypto } from './mockCrypto'\r\n\r\nexport const keyString =\r\n  'ecc6212465b39a9a704d564f07da0402af210888e730f419a7faf5f347a33b3d'\r\nexport const secretKeyString =\r\n  '2234567890abcdef1234567880abcdef1234567890abcdef1234567890fedcba'\r\n\r\n// hypercore seems to be happy when I turn the key into a discoveryKey,\r\n// maybe we could get away with just using a Buffer (or just calling discoveryKey with a string?)\r\nconst key: Key = crypto.discoveryKey(Buffer.from(keyString))\r\n// hypercore doesn't seem to like the secret key being a discoveryKey,\r\n// but rather just a Buffer\r\nconst secretKey: Key = Buffer.from(secretKeyString)\r\n\r\ninterface CevitxeStoreOptions {\r\n  // Redux store\r\n  reducer: Reducer\r\n  preloadedState?: any\r\n  middlewares?: Middleware[]\r\n  // hypercore feed options\r\n  databaseName?: string\r\n  peerHubs?: string[]\r\n}\r\n\r\n// This is currently a class but might make more sense as just a function\r\nconst CevitxeFeed = () => {\r\n  let feed: Feed<any>\r\n  let databaseName: string\r\n  let peerHubs: Array<string>\r\n  let reduxStore: Store\r\n\r\n  const createStore = (options: CevitxeStoreOptions) => {\r\n    databaseName = options.databaseName || 'data'\r\n    peerHubs = options.peerHubs || [\r\n      'https://signalhub-jccqtwhdwc.now.sh/', // default public signaling server\r\n    ]\r\n\r\n    // Init an indexedDB\r\n    const todos = rai(getStoreName())\r\n    const storage = (filename: any) => todos(filename)\r\n\r\n    // Create a new hypercore feed\r\n    feed = hypercore(storage, key, {\r\n      secretKey: secretKey,\r\n      valueEncoding: 'utf-8',\r\n      crypto: mockCrypto,\r\n    })\r\n    feed.on('error', (err: any) => console.log(err))\r\n\r\n    feed.on('ready', () => {\r\n      console.log('ready', key.toString('hex'))\r\n      console.log('discovery', feed.discoveryKey.toString('hex'))\r\n      joinSwarm()\r\n    })\r\n\r\n    startStreamReader()\r\n\r\n    // Return the new Redux store\r\n    reduxStore = createReduxStore(options)\r\n    // Write the initial automerge state to the feed\r\n    //const storeState = reduxStore.getState()\r\n    console.log('todos', todos)\r\n    debugger\r\n    // if (storeState !== null && storeState !== undefined) {\r\n    //   const history = automerge.getChanges(automerge.init(), storeState)\r\n    //   history.forEach(c => feed.append(JSON.stringify(c)))\r\n    //   console.log('writing initial state to feed')\r\n    //   // write history as an array of changes, abondonded for individual change writing\r\n    //   //feed.append(JSON.stringify(history))\r\n    // }\r\n    return reduxStore\r\n  }\r\n\r\n  const feedMiddleware: Middleware = store => next => action => {\r\n    // feed.append(JSON.stringify(action.payload.action))\r\n    const prevState = store.getState()\r\n    const result = next(action)\r\n    // Don't re-write items to the feed\r\n    if (action.payload.fromCevitxe) {\r\n      console.log('already from cevitxe, skipping the feed write')\r\n      return result\r\n    }\r\n    const nextState = store.getState()\r\n    const existingState = prevState ? prevState : automerge.init()\r\n    console.log('existingState', existingState)\r\n    console.log('nextState', nextState)\r\n    const changes = automerge.getChanges(existingState, nextState)\r\n    changes.forEach(c => feed.append(JSON.stringify(c)))\r\n    return result\r\n  }\r\n\r\n  // Read items from this and peer feeds,\r\n  // then dispatch them to our redux store\r\n  const startStreamReader = () => {\r\n    // Wire up reading from the feed\r\n    const stream = feed.createReadStream({ live: true })\r\n    stream.on('data', (value: string) => {\r\n      // try {\r\n      const change = JSON.parse(value)\r\n      console.log('onData', change)\r\n      reduxStore.dispatch(actions.applyChange(change))\r\n      // } catch (err) {\r\n      //   console.log('feed read error', err)\r\n      //   console.log('feed stream returned an unknown value', value)\r\n      // }\r\n    })\r\n  }\r\n\r\n  // Join our feed to the swarm and accept peers\r\n  const joinSwarm = () => {\r\n    // could add option to disallow peer connectivity here\r\n    const hub = signalhub(getKeyHex(), peerHubs)\r\n    const sw = swarm(hub)\r\n    sw.on('peer', onPeerConnect)\r\n  }\r\n\r\n  // When a feed peer connects, replicate our feed to them\r\n  const onPeerConnect = (peer: any, id: any) => {\r\n    console.log('peer', id, peer)\r\n    pump(\r\n      peer,\r\n      feed.replicate({\r\n        encrypt: false,\r\n        live: true,\r\n        upload: true,\r\n        download: true,\r\n      }),\r\n      peer\r\n    )\r\n  }\r\n\r\n  const getKeyHex = () => key.toString('hex')\r\n  // I'm constructing a name here using the key because re-using the same name\r\n  // with different keys throws an error \"Another hypercore is stored here\"\r\n  const getStoreName = () => `${databaseName}-${getKeyHex().substr(0, 12)}`\r\n\r\n  const createReduxStore = (options: CevitxeStoreOptions) => {\r\n    // let enhancer: StoreEnhancer<any> | undefined\r\n    let initialState: any\r\n    // let preloadedStateProvided: Boolean = false\r\n\r\n    // // We received 2 params: reducer and enhancer\r\n    // if (\r\n    //   typeof preloadedState_orEnhancer === 'function' &&\r\n    //   typeof enhancer_or_undefined === 'undefined'\r\n    // ) {\r\n    //   enhancer = preloadedState_orEnhancer\r\n    //   initialState = undefined\r\n    // } else {\r\n    //   preloadedStateProvided = true\r\n    //   enhancer = enhancer_or_undefined\r\n    //   // Convert the plain object preloadedState to Automerge using initialize()\r\n    //   initialState = initialize(preloadedState_orEnhancer as DeepPartial<\r\n    //     S\r\n    //   > | null)\r\n    //   //initialState = preloadedState_orEnhancer as DeepPartial<S> | null\r\n    //   console.log('initialized state', initialState)\r\n    //   // TODO: Push the initial state operations to the feed\r\n    // }\r\n\r\n    let optionMiddlewares = options.middlewares ? options.middlewares : []\r\n    const middlewares = [...optionMiddlewares, feedMiddleware]\r\n    // check\r\n    //if (enhancer !== undefined) middlewares.push(enhancer)\r\n\r\n    console.log('adding a feed-enabled reducer here')\r\n\r\n    // Add the cevitxe reducer at the same level as the user's reducer\r\n    // This allows us to operate at the root state and the user can still\r\n    // have nested state reducers.\r\n    // note: Casting these as Reducer may not be right\r\n    // const combinedReducers = reduceReducers(\r\n    //   null,\r\n    //   adaptReducer as Reducer,\r\n    //   reducer as Reducer\r\n    // )\r\n    // console.log('combined reducers', combinedReducers)\r\n\r\n    if (options.preloadedState) {\r\n      // Convert the plain object preloadedState to Automerge using initialize()\r\n      initialState = initialize(options.preloadedState)\r\n      console.log('initialized state', initialState)\r\n      // TODO: Push the initial state operations to the feed\r\n\r\n      console.log('creating redux store with initial state', initialState)\r\n      return reduxCreateStore(\r\n        options.reducer,\r\n        initialState,\r\n        applyMiddleware(...middlewares)\r\n      )\r\n    }\r\n    console.log('creating redux store without initial state')\r\n    return reduxCreateStore(\r\n      options.reducer as Reducer,\r\n      applyMiddleware(...middlewares)\r\n    )\r\n  }\r\n\r\n  return { createStore }\r\n}\r\n\r\nconst feedInstance = CevitxeFeed()\r\n\r\nexport const { createStore } = feedInstance\r\n\r\n// export const { CevitxeFeed as Feed }\r\n","//export * from './actions'\r\nexport * from './adaptReducer'\r\nexport * from './constants'\r\n//export * from './dynamicMiddleware'\r\nexport * from './feed'\r\nexport * from './initialize'\r\n//export * from './load'\r\n// export * from './middleware'\r\nexport * from './mockCrypto'\r\n//export * from './save'\r\nexport * from './types'\r\n"],"names":["APPLY_CHANGE","adaptReducer","proxyReducer","state","type","payload","console","log","change","startingState","message","automerge","init","newState","applyChanges","msg","JSON","stringify","fn","initialize","obj","d","k","actions","applyChange","fromCevitxe","mockCrypto","sign","data","sk","cb","crypto","verify","_sig","_data","_pk","keyString","secretKeyString","key","discoveryKey","Buffer","from","secretKey","CevitxeFeed","feed","databaseName","peerHubs","reduxStore","createStore","options","todos","rai","getStoreName","storage","filename","hypercore","valueEncoding","on","err","toString","joinSwarm","startStreamReader","createReduxStore","feedMiddleware","store","next","action","prevState","getState","result","nextState","existingState","changes","getChanges","forEach","c","append","stream","createReadStream","live","value","parse","dispatch","hub","signalhub","getKeyHex","sw","swarm","onPeerConnect","peer","id","pump","replicate","encrypt","upload","download","substr","initialState","optionMiddlewares","middlewares","preloadedState","reduxCreateStore","reducer","applyMiddleware","feedInstance"],"mappings":"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"}