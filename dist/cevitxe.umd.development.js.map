{"version":3,"file":"cevitxe.umd.development.js","sources":["../src/constants.ts","../src/adaptReducer.ts","../src/initialize.ts","../src/actions.ts","../src/mockCrypto.ts","../src/feed.ts","../src/index.ts"],"sourcesContent":["export const APPLY_CHANGE = 'cevitxe/APPLY_CHANGE';\r\n","import { ReducerAdapter } from './types'\r\nimport automerge from 'automerge'\r\nimport { APPLY_CHANGE } from './constants'\r\n\r\nexport const adaptReducer: ReducerAdapter = proxyReducer => (\r\n  state,\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case APPLY_CHANGE: {\r\n      console.log('APPLY_CHANGE REDUCER!!!!', payload)\r\n      const { change } = payload\r\n      let startingState = state\r\n      if (change[0].message === \"initialize\"){\r\n        startingState = automerge.init()\r\n        console.log('found initialize', change)\r\n      }\r\n      const newState = automerge.applyChanges(startingState, change)\r\n      console.log(newState)\r\n      return newState \r\n    }\r\n    default: {\r\n      const msg = `${type}: ${JSON.stringify(payload)}`\r\n      const fn = proxyReducer({ type, payload })\r\n      return fn && state\r\n        ? automerge.change(state, msg, fn) // return a modified Automerge object\r\n        : state // no matching change function was found, return state unchanged\r\n    }\r\n  }\r\n}\r\n","import automerge from 'automerge'\r\n\r\n// Builds a new automerge object from the object provided\r\nexport const initialize = <T>(obj: T) =>\r\n  automerge.change(automerge.init<T>(), 'initialize', (d: T) => {\r\n    for (const k in obj) {\r\n      d[k] = obj[k]\r\n    }\r\n  })\r\n","import { Change } from './types'\r\nimport { APPLY_CHANGE } from './constants'\r\n\r\nexport const actions = {\r\n  applyChange: (change: Change) => ({\r\n    type: APPLY_CHANGE,\r\n    payload: { change },\r\n  }),\r\n}\r\n","import crypto from 'hypercore-crypto';\r\n// TODO: Get crypto working properly\r\n// This is a hack because I was getting errors verifying the remove signature\r\n// I took the code from hypercore and am just always returning true for the verification\r\n// We need to look deeper into why it's not signing properly or maybe just provide our\r\n// own crypto methods here.\r\nexport const mockCrypto = {\r\n  sign: (data: any, sk: any, cb: any) => {\r\n    return cb(null, crypto.sign(data, sk));\r\n  },\r\n  verify: (_sig: any, _data: any, _pk: any, cb: any) => {\r\n    // Always say it's a valid signature (for testing)\r\n    return cb(null, true);\r\n  },\r\n};\r\n","import automerge from 'automerge'\r\nimport { Buffer } from 'buffer'\r\nimport hypercore from 'hypercore'\r\nimport crypto from 'hypercore-crypto'\r\nimport pump from 'pump'\r\nimport rai from 'random-access-idb'\r\n//import reduceReducers from 'reduce-reducers'\r\nimport {\r\n  //Action,\r\n  applyMiddleware,\r\n  createStore as reduxCreateStore,\r\n  //DeepPartial,\r\n  Middleware,\r\n  Reducer,\r\n  Store,\r\n  //Store,\r\n  //StoreEnhancer,\r\n} from 'redux'\r\nimport signalhub from 'signalhub'\r\nimport swarm from 'webrtc-swarm'\r\n//import { adaptReducer } from './adaptReducer'\r\nimport { initialize } from './initialize'\r\nimport { actions } from './actions'\r\nimport { mockCrypto } from './mockCrypto'\r\n\r\nexport const keyString =\r\n  'ecc6212465b39a9a704d564f07da0402af210888e730f419a7faf5f347a33b3d'\r\nexport const secretKeyString =\r\n  '2234567890abcdef1234567880abcdef1234567890abcdef1234567890fedcba'\r\n\r\n// hypercore seems to be happy when I turn the key into a discoveryKey,\r\n// maybe we could get away with just using a Buffer (or just calling discoveryKey with a string?)\r\nconst key: Key = crypto.discoveryKey(Buffer.from(keyString))\r\n// hypercore doesn't seem to like the secret key being a discoveryKey,\r\n// but rather just a Buffer\r\nconst secretKey: Key = Buffer.from(secretKeyString)\r\n\r\ninterface CevitxeStoreOptions {\r\n  // Redux store\r\n  reducer: Reducer\r\n  preloadedState?: any\r\n  middlewares?: Middleware[]\r\n  // hypercore feed options\r\n  databaseName?: string\r\n  peerHubs?: string[]\r\n}\r\n\r\n// This is currently a class but might make more sense as just a function\r\nconst CevitxeFeed = () => {\r\n  let feed: Feed<any>\r\n  let databaseName: string\r\n  let peerHubs: Array<string>\r\n  let reduxStore: Store\r\n\r\n  const createStore = (options: CevitxeStoreOptions) => {\r\n    databaseName = options.databaseName || 'data'\r\n    peerHubs = options.peerHubs || [\r\n      'https://signalhub-jccqtwhdwc.now.sh/', // default public signaling server\r\n    ]\r\n\r\n    // Init an indexedDB\r\n    // I'm constructing a name here using the key because re-using the same name\r\n    // with different keys throws an error \"Another hypercore is stored here\"\r\n    const todos = rai(`${databaseName}-${getKeyHex().substr(0, 12)}`)\r\n    const storage = (filename: any) => todos(filename)\r\n\r\n    // Create a new hypercore feed\r\n    feed = hypercore(storage, key, {\r\n      secretKey: secretKey,\r\n      valueEncoding: 'utf-8',\r\n      crypto: mockCrypto,\r\n    })\r\n    feed.on('error', (err: any) => console.log(err))\r\n\r\n    feed.on('ready', () => {\r\n      console.log('ready', key.toString('hex'))\r\n      console.log('discovery', feed.discoveryKey.toString('hex'))\r\n      joinSwarm()\r\n    })\r\n\r\n    startStreamReader()\r\n\r\n    // Return the new Redux store\r\n    reduxStore = createReduxStore(options)\r\n    // Write the initial automerge state to the feed\r\n    const storeState = reduxStore.getState()\r\n    if (storeState !== null && storeState !== undefined){\r\n      const history = automerge.getChanges(automerge.init(), storeState)\r\n      console.log('writing initial state to feed')\r\n      feed.append(JSON.stringify(history))\r\n    }\r\n    return reduxStore\r\n  }\r\n\r\n  const feedMiddleware: Middleware = store => next => action => {\r\n    // feed.append(JSON.stringify(action.payload.action))\r\n    const prevState = store.getState()\r\n    const result = next(action)\r\n    const nextState = store.getState()\r\n    const existingState = prevState ? prevState : automerge.init()\r\n    console.log('existingState', existingState)\r\n    console.log('nextState', nextState)\r\n    const changes = automerge.getChanges(existingState, nextState)\r\n    changes.forEach(c => feed.append(JSON.stringify(c)))\r\n    return result\r\n  }\r\n\r\n  // Read items from this and peer feeds,\r\n  // then dispatch them to our redux store\r\n  const startStreamReader = () => {\r\n    // Wire up reading from the feed\r\n    const stream = feed.createReadStream({ live: true })\r\n    stream.on('data', (value: string) => {\r\n      // try {\r\n        const change = JSON.parse(value)\r\n        console.log('onData', change)\r\n        reduxStore.dispatch(actions.applyChange(change))\r\n      // } catch (err) {\r\n      //   console.log('feed read error', err)\r\n      //   console.log('feed stream returned an unknown value', value)\r\n      // }\r\n    })\r\n  }\r\n\r\n  // Join our feed to the swarm and accept peers\r\n  const joinSwarm = () => {\r\n    // could add option to disallow peer connectivity here\r\n    const hub = signalhub(getKeyHex(), peerHubs)\r\n    const sw = swarm(hub)\r\n    sw.on('peer', onPeerConnect)\r\n  }\r\n\r\n  // When a feed peer connects, replicate our feed to them\r\n  const onPeerConnect = (peer: any, id: any) => {\r\n    console.log('peer', id, peer)\r\n    pump(\r\n      peer,\r\n      feed.replicate({\r\n        encrypt: false,\r\n        live: true,\r\n        upload: true,\r\n        download: true,\r\n      }),\r\n      peer\r\n    )\r\n  }\r\n\r\n  const getKeyHex = () => key.toString('hex')\r\n\r\n  const createReduxStore = (options: CevitxeStoreOptions) => {\r\n    // let enhancer: StoreEnhancer<any> | undefined\r\n    let initialState: any\r\n    // let preloadedStateProvided: Boolean = false\r\n\r\n    // // We received 2 params: reducer and enhancer\r\n    // if (\r\n    //   typeof preloadedState_orEnhancer === 'function' &&\r\n    //   typeof enhancer_or_undefined === 'undefined'\r\n    // ) {\r\n    //   enhancer = preloadedState_orEnhancer\r\n    //   initialState = undefined\r\n    // } else {\r\n    //   preloadedStateProvided = true\r\n    //   enhancer = enhancer_or_undefined\r\n    //   // Convert the plain object preloadedState to Automerge using initialize()\r\n    //   initialState = initialize(preloadedState_orEnhancer as DeepPartial<\r\n    //     S\r\n    //   > | null)\r\n    //   //initialState = preloadedState_orEnhancer as DeepPartial<S> | null\r\n    //   console.log('initialized state', initialState)\r\n    //   // TODO: Push the initial state operations to the feed\r\n    // }\r\n\r\n    let optionMiddlewares = options.middlewares ? options.middlewares : []\r\n    const middlewares = [...optionMiddlewares, feedMiddleware]\r\n    // check\r\n    //if (enhancer !== undefined) middlewares.push(enhancer)\r\n\r\n    console.log('adding a feed-enabled reducer here')\r\n\r\n    // Add the cevitxe reducer at the same level as the user's reducer\r\n    // This allows us to operate at the root state and the user can still\r\n    // have nested state reducers.\r\n    // note: Casting these as Reducer may not be right\r\n    // const combinedReducers = reduceReducers(\r\n    //   null,\r\n    //   adaptReducer as Reducer,\r\n    //   reducer as Reducer\r\n    // )\r\n    // console.log('combined reducers', combinedReducers)\r\n\r\n    if (options.preloadedState) {\r\n      // Convert the plain object preloadedState to Automerge using initialize()\r\n      initialState = initialize(options.preloadedState)\r\n      console.log('initialized state', initialState)\r\n      // TODO: Push the initial state operations to the feed\r\n\r\n      console.log('creating redux store with initial state', initialState)\r\n      return reduxCreateStore(\r\n        options.reducer,\r\n        initialState,\r\n        applyMiddleware(...middlewares)\r\n      )\r\n    }\r\n    console.log('creating redux store without initial state')\r\n    return reduxCreateStore(options.reducer as Reducer, applyMiddleware(...middlewares))\r\n  }\r\n\r\n  return { createStore }\r\n}\r\n\r\nconst feedInstance = CevitxeFeed()\r\n\r\nexport const { createStore } = feedInstance\r\n\r\n// export const { CevitxeFeed as Feed }\r\n","//export * from './actions'\r\nexport * from './adaptReducer'\r\nexport * from './constants'\r\n//export * from './dynamicMiddleware'\r\nexport * from './feed'\r\nexport * from './initialize'\r\n//export * from './load'\r\n// export * from './middleware'\r\nexport * from './mockCrypto'\r\n//export * from './save'\r\nexport * from './types'\r\n"],"names":["APPLY_CHANGE","adaptReducer","proxyReducer","state","type","payload","console","log","change","startingState","message","automerge","init","newState","applyChanges","msg","JSON","stringify","fn","initialize","obj","d","k","actions","applyChange","mockCrypto","sign","data","sk","cb","crypto","verify","_sig","_data","_pk","keyString","secretKeyString","key","discoveryKey","Buffer","from","secretKey","CevitxeFeed","feed","databaseName","peerHubs","reduxStore","createStore","options","todos","rai","getKeyHex","substr","storage","filename","hypercore","valueEncoding","on","err","toString","joinSwarm","startStreamReader","createReduxStore","storeState","getState","undefined","history","getChanges","append","feedMiddleware","store","next","action","prevState","result","nextState","existingState","changes","forEach","c","stream","createReadStream","live","value","parse","dispatch","hub","signalhub","sw","swarm","onPeerConnect","peer","id","pump","replicate","encrypt","upload","download","initialState","optionMiddlewares","middlewares","preloadedState","reduxCreateStore","reducer","applyMiddleware","feedInstance"],"mappings":"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"}