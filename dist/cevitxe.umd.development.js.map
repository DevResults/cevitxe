{"version":3,"file":"cevitxe.umd.development.js","sources":["../src/constants.ts","../src/actions.ts","../src/adaptReducer.ts","../src/dynamicMiddleware.ts","../src/mockCrypto.ts","../src/feed.ts","../src/initialize.ts","../src/load.ts","../src/save.ts","../src/middleware.ts"],"sourcesContent":["export const APPLY_CHANGE = 'cevitxe/APPLY_CHANGE';\r\n","import { Change } from './types'\r\nimport { APPLY_CHANGE } from './constants'\r\n\r\nexport const actions = {\r\n  applyChange: (change: Change) => ({\r\n    type: APPLY_CHANGE,\r\n    payload: { change },\r\n  }),\r\n}\r\n","import { ReducerAdapter } from './types'\r\nimport automerge from 'automerge'\r\nimport { APPLY_CHANGE } from './constants'\r\n\r\nexport const adaptReducer: ReducerAdapter = proxyReducer => (\r\n  state,\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case APPLY_CHANGE: {\r\n      console.log('APPLY_CHANGE REDUCER!!!!', payload)\r\n      const newState = automerge.applyChanges(state, [payload.change])\r\n      console.log(newState)\r\n      return newState \r\n    }\r\n    default: {\r\n      const msg = `${type}: ${JSON.stringify(payload)}`\r\n      const fn = proxyReducer({ type, payload })\r\n      return fn && state\r\n        ? automerge.change(state, msg, fn) // return a modified Automerge object\r\n        : state // no matching change function was found, return state unchanged\r\n    }\r\n  }\r\n}\r\n","import { compose, Middleware } from 'redux'\r\n\r\nconst createDynamicMiddlewares = () => {\r\n  let allDynamicMiddlewares: Middleware[] = []\r\n\r\n  const enhancer: Middleware = store => next => action => {\r\n    const chain = allDynamicMiddlewares.map(middleware => middleware(store))\r\n    return compose<Middleware>(...chain)(next)(action)\r\n  }\r\n\r\n  const addMiddleware = (...middlewares: Middleware[]) => {\r\n    allDynamicMiddlewares = [...allDynamicMiddlewares, ...middlewares]\r\n  }\r\n\r\n  const removeMiddleware = (middleware: Middleware) => {\r\n    const index = allDynamicMiddlewares.findIndex(d => d === middleware)\r\n\r\n    if (index === -1) {\r\n      console.error('Middleware does not exist!', middleware)\r\n      return\r\n    }\r\n\r\n    allDynamicMiddlewares = allDynamicMiddlewares.filter(\r\n      (_, mdwIndex) => mdwIndex !== index\r\n    )\r\n  }\r\n\r\n  const resetMiddlewares = () => {\r\n    allDynamicMiddlewares = []\r\n  }\r\n\r\n  return {\r\n    enhancer,\r\n    addMiddleware,\r\n    removeMiddleware,\r\n    resetMiddlewares,\r\n  }\r\n}\r\n\r\nconst dynamicMiddlewaresInstance = createDynamicMiddlewares()\r\n\r\nexport const cevitxeMiddleware = dynamicMiddlewaresInstance.enhancer\r\n\r\nexport const {\r\n  addMiddleware,\r\n  removeMiddleware,\r\n  resetMiddlewares,\r\n} = dynamicMiddlewaresInstance\r\n\r\nexport { createDynamicMiddlewares }\r\n","import crypto from 'hypercore-crypto';\r\n// TODO: Get crypto working properly\r\n// This is a hack because I was getting errors verifying the remove signature\r\n// I took the code from hypercore and am just always returning true for the verification\r\n// We need to look deeper into why it's not signing properly or maybe just provide our\r\n// own crypto methods here.\r\nexport const mockCrypto = {\r\n  sign: (data: any, sk: any, cb: any) => {\r\n    return cb(null, crypto.sign(data, sk));\r\n  },\r\n  verify: (_sig: any, _data: any, _pk: any, cb: any) => {\r\n    // Always say it's a valid signature (for testing)\r\n    return cb(null, true);\r\n  },\r\n};\r\n","//import automerge from 'automerge'\r\nimport { Buffer } from 'buffer'\r\nimport hypercore from 'hypercore'\r\nimport crypto from 'hypercore-crypto'\r\nimport pump from 'pump'\r\nimport rai from 'random-access-idb'\r\nimport { createStore as createReduxStore, Reducer, Action, StoreEnhancer, Store, DeepPartial } from 'redux'\r\nimport signalhub from 'signalhub'\r\nimport swarm from 'webrtc-swarm'\r\n\r\n//import { actions } from './actions'\r\n//import { addMiddleware } from './dynamicMiddleware'\r\nimport { mockCrypto } from './mockCrypto'\r\n\r\n// This is currently a class but might make more sense as just a function\r\nconst CevitxeFeed = () => {\r\n  // private reduxStore: Store\r\n  let feed: Feed<any>\r\n  let databaseName: string\r\n  let key: Key\r\n  let secretKey: Key\r\n  let peerHubs: Array<string>\r\n\r\n  const createFeed = (options: any) => {\r\n    if (!options.key)\r\n      throw new Error('Key is required, should be XXXX in length')\r\n    // hypercore seems to be happy when I turn the key into a discoveryKey,\r\n    // maybe we could get away with just using a Buffer (or just calling discoveryKey with a string?)\r\n    key = crypto.discoveryKey(Buffer.from(options.key))\r\n    if (!options.secretKey)\r\n      throw new Error('Secret key is required, should be XXXX in length')\r\n\r\n    // hypercore doesn't seem to like the secret key being a discoveryKey,\r\n    // but rather just a Buffer\r\n    secretKey = Buffer.from(options.secretKey)\r\n    databaseName = options.databaseName || 'data'\r\n    peerHubs = options.peerHubs || [\r\n      'https://signalhub-jccqtwhdwc.now.sh/', // default public signaling server\r\n    ]\r\n\r\n    // Init an indexedDB\r\n    // I'm constructing a name here using the key because re-using the same name\r\n    // with different keys throws an error \"Another hypercore is stored here\"\r\n    const todos = rai(`${databaseName}-${getKeyHex().substr(0, 12)}`)\r\n    const storage = (filename: any) => todos(filename)\r\n\r\n    // Create a new hypercore feed\r\n    feed = hypercore(storage, key, {\r\n      secretKey: secretKey,\r\n      valueEncoding: 'utf-8',\r\n      crypto: mockCrypto,\r\n    })\r\n    feed.on('error', (err: any) => console.log(err))\r\n\r\n    feed.on('ready', () => {\r\n      console.log('ready', key.toString('hex'))\r\n      console.log('discovery', feed.discoveryKey.toString('hex'))\r\n      joinSwarm()\r\n    })\r\n\r\n    startStreamReader()\r\n\r\n    // Inject our custom middleware using redux-dynamic-middlewares\r\n    // I did this because we need a middleware that can use our feed instance\r\n    // An alternative might be to instantiate Feed and then create the redux store,\r\n    // then you'd just need a Feed.assignStore(store) method or something to give this\r\n    // class a way to dispatch to the store.\r\n    //addMiddleware(feedMiddleware)\r\n\r\n    return { createStore }\r\n  }\r\n\r\n  // This middleware has an extra function at the beginning that takes\r\n  // a 'store' param, which we're not using so it's omitted.\r\n  // This is an implementation detail with redux-dynamic-middlewares\r\n  // const feedMiddleware: Middleware = store => next => action => {\r\n  //   // feed.append(JSON.stringify(action.payload.action))\r\n  //   const prevState = store.getState()\r\n  //   const result = next(action)\r\n  //   const nextState = store.getState()\r\n  //   const changes = automerge.getChanges(prevState, nextState)\r\n  //   changes.forEach(c => feed.append(JSON.stringify(c)))\r\n  //   return result\r\n  // }\r\n\r\n  // Read items from this and peer feeds,\r\n  // then dispatch them to our redux store\r\n  const startStreamReader = () => {\r\n    // Wire up reading from the feed\r\n    const stream = feed.createReadStream({ live: true })\r\n    stream.on('data', (value: string) => {\r\n      try {\r\n        const change = JSON.parse(value)\r\n        console.log('onData', change)\r\n        //reduxStore.dispatch(actions.applyChange(change))\r\n      } catch (err) {\r\n        console.log('feed read error', err)\r\n        console.log('feed stream returned an unknown value', value)\r\n      }\r\n    })\r\n  }\r\n\r\n  // Join our feed to the swarm and accept peers\r\n  const joinSwarm = () => {\r\n    // could add option to disallow peer connectivity here\r\n    const hub = signalhub(getKeyHex(), peerHubs)\r\n    const sw = swarm(hub)\r\n    sw.on('peer', onPeerConnect)\r\n  }\r\n\r\n  // When a feed peer connects, replicate our feed to them\r\n  const onPeerConnect = (peer: any, id: any) => {\r\n    console.log('peer', id, peer)\r\n    pump(\r\n      peer,\r\n      feed.replicate({\r\n        encrypt: false,\r\n        live: true,\r\n        upload: true,\r\n        download: true,\r\n      }),\r\n      peer\r\n    ) \r\n  }\r\n\r\n  const getKeyHex = () => key.toString('hex')\r\n  \r\n  // This follows the type definitions for StoreCreator's two overloads in the Redux source\r\n  function createStore <S, A extends Action>(reducer: Reducer<S, A>, enhancer?: StoreEnhancer<any>): Store<S, A>\r\n  function createStore <S, A extends Action>(reducer: Reducer<S, A>, preloadedState?: DeepPartial<S>, enhancer?: StoreEnhancer<any>): Store<S, A>\r\n  function createStore <S, A extends Action>(reducer: Reducer<S, A>, preloadedState_orEnhancer?: DeepPartial<S> | StoreEnhancer<any>, enhancer_or_undefined?: StoreEnhancer<any>) {\r\n    let enhancer: StoreEnhancer<any>\r\n    let preloadedState: DeepPartial<S> | StoreEnhancer<any> | undefined\r\n\r\n    if (enhancer_or_undefined !== undefined) {\r\n      preloadedState = preloadedState_orEnhancer\r\n      enhancer = enhancer_or_undefined\r\n    } else {\r\n      enhancer = preloadedState_orEnhancer as StoreEnhancer<any>\r\n    }\r\n    \r\n    console.log('add a feed-enabled reducer here')\r\n    // inject our reducer here\r\n    if (preloadedState !== undefined)\r\n      return createReduxStore(reducer, preloadedState as DeepPartial<S>, enhancer as StoreEnhancer<any>);\r\n    return createReduxStore(reducer, enhancer as StoreEnhancer<any>);\r\n  }\r\n\r\n  return { createFeed }\r\n}\r\n\r\nconst feedInstance = CevitxeFeed();\r\n\r\nexport const {\r\n  createFeed\r\n} = feedInstance\r\n\r\n// export const { CevitxeFeed as Feed }\r\n","import automerge from 'automerge'\r\n\r\n// Builds a new automerge object from the object provided\r\nexport const initialize = <T>(obj: T) =>\r\n  automerge.change(automerge.init<T>(), 'initialize', (d: T) => {\r\n    for (const k in obj) {\r\n      d[k] = obj[k]\r\n    }\r\n  })\r\n","import automerge from 'automerge'\r\n\r\nexport const load = <T>(key: string): T | null => {\r\n  const history = localStorage.getItem(key)\r\n  return history ? automerge.load(history) : null\r\n}\r\n","import automerge from 'automerge'\r\n\r\nexport const save = <T>(key: string, state: T): void => {\r\n  const history = automerge.save(state)\r\n  localStorage.setItem(key, history)\r\n}\r\n","import { Middleware } from 'redux'\r\nimport { save } from './save'\r\n\r\ntype Options = {\r\n  key: string\r\n}\r\n\r\nexport const middleware = ({ key }: Options): Middleware => {\r\n  return store => next => action => {\r\n    const result = next(action)\r\n    const nextState = store.getState()\r\n    save(key, nextState)\r\n    return result\r\n  }\r\n}\r\n"],"names":["APPLY_CHANGE","actions","applyChange","change","type","payload","adaptReducer","proxyReducer","state","console","log","newState","automerge","applyChanges","msg","JSON","stringify","fn","createDynamicMiddlewares","allDynamicMiddlewares","enhancer","store","next","action","chain","map","middleware","compose","addMiddleware","middlewares","removeMiddleware","index","findIndex","d","error","filter","_","mdwIndex","resetMiddlewares","dynamicMiddlewaresInstance","cevitxeMiddleware","mockCrypto","sign","data","sk","cb","crypto","verify","_sig","_data","_pk","CevitxeFeed","feed","databaseName","key","secretKey","peerHubs","createFeed","options","Error","discoveryKey","Buffer","from","todos","rai","getKeyHex","substr","storage","filename","hypercore","valueEncoding","on","err","toString","joinSwarm","startStreamReader","createStore","stream","createReadStream","live","value","parse","hub","signalhub","sw","swarm","onPeerConnect","peer","id","pump","replicate","encrypt","upload","download","reducer","preloadedState_orEnhancer","enhancer_or_undefined","preloadedState","undefined","createReduxStore","feedInstance","initialize","obj","init","k","load","history","localStorage","getItem","save","setItem","result","nextState","getState"],"mappings":"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"}