{"version":3,"file":"cevitxe.es.production.js","sources":["../src/automergeReducer.ts","../src/dynamicMiddleware.ts","../src/mockCrypto.ts","../src/feed.ts","../src/initialize.ts","../src/load.ts","../src/save.ts","../src/middleware.ts"],"sourcesContent":["import Automerge from 'automerge'\r\nimport { Reducer } from 'redux'\r\nimport { Action } from './types'\r\nimport { ProxyReducer } from './types'\r\n\r\ntype AR = <T>(proxyReducer: ProxyReducer<T>) => Reducer<T | undefined, Action>\r\n\r\nexport const automergeReducer: AR = proxyReducer => (state, action) => {\r\n  const { type, payload } = action\r\n  const msg = `${type}: ${JSON.stringify(payload)}`\r\n  const fn = proxyReducer({ type, payload })\r\n  return fn && state\r\n    ? Automerge.change(state, msg, fn) // return a modified Automerge object\r\n    : state // no matching change function was found, return state unchanged\r\n}\r\n","import { compose, Middleware } from 'redux'\r\n\r\nconst createDynamicMiddlewares = () => {\r\n  let allDynamicMiddlewares: Middleware[] = []\r\n\r\n  const enhancer: Middleware = store => next => action => {\r\n    const chain = allDynamicMiddlewares.map(middleware => middleware(store))\r\n    return compose<Middleware>(...chain)(next)(action)\r\n  }\r\n\r\n  const addMiddleware = (...middlewares: Middleware[]) => {\r\n    allDynamicMiddlewares = [...allDynamicMiddlewares, ...middlewares]\r\n  }\r\n\r\n  const removeMiddleware = (middleware: Middleware) => {\r\n    const index = allDynamicMiddlewares.findIndex(d => d === middleware)\r\n\r\n    if (index === -1) {\r\n      console.error('Middleware does not exist!', middleware)\r\n      return\r\n    }\r\n\r\n    allDynamicMiddlewares = allDynamicMiddlewares.filter(\r\n      (_, mdwIndex) => mdwIndex !== index\r\n    )\r\n  }\r\n\r\n  const resetMiddlewares = () => {\r\n    allDynamicMiddlewares = []\r\n  }\r\n\r\n  return {\r\n    enhancer,\r\n    addMiddleware,\r\n    removeMiddleware,\r\n    resetMiddlewares,\r\n  }\r\n}\r\n\r\nconst dynamicMiddlewaresInstance = createDynamicMiddlewares()\r\n\r\nexport const cevitxeMiddleware = dynamicMiddlewaresInstance.enhancer\r\n\r\nexport const {\r\n  addMiddleware,\r\n  removeMiddleware,\r\n  resetMiddlewares,\r\n} = dynamicMiddlewaresInstance\r\n\r\nexport { createDynamicMiddlewares }\r\n","import crypto from 'hypercore-crypto';\r\n// TODO: Get crypto working properly\r\n// This is a hack because I was getting errors verifying the remove signature\r\n// I took the code from hypercore and am just always returning true for the verification\r\n// We need to look deeper into why it's not signing properly or maybe just provide our\r\n// own crypto methods here.\r\nexport const mockCrypto = {\r\n  sign: (data: any, sk: any, cb: any) => {\r\n    return cb(null, crypto.sign(data, sk));\r\n  },\r\n  verify: (_sig: any, _data: any, _pk: any, cb: any) => {\r\n    // Always say it's a valid signature (for testing)\r\n    return cb(null, true);\r\n  },\r\n};\r\n","import { Buffer } from 'buffer'\r\nimport hypercore from 'hypercore'\r\nimport crypto from 'hypercore-crypto'\r\nimport pump from 'pump'\r\nimport rai from 'random-access-idb'\r\nimport { Store, Middleware } from 'redux'\r\nimport signalhub from 'signalhub'\r\nimport swarm from 'webrtc-swarm'\r\nimport { addMiddleware } from './dynamicMiddleware'\r\nimport { mockCrypto } from './mockCrypto'\r\nimport automerge from 'automerge'\r\n\r\n// This is currently a class but might make more sense as just a function\r\nclass CevitxeFeed {\r\n  private reduxStore: Store\r\n  private feed: Feed<any>\r\n  private databaseName: string\r\n  private key: Key\r\n  private secretKey: Key\r\n  private peerHubs: Array<string>\r\n\r\n  constructor(reduxStore: any, options: any) {\r\n    if (!options.key)\r\n      throw new Error('Key is required, should be XXXX in length')\r\n    // hypercore seems to be happy when I turn the key into a discoveryKey,\r\n    // maybe we could get away with just using a Buffer (or just calling discoveryKey with a string?)\r\n    this.key = crypto.discoveryKey(Buffer.from(options.key))\r\n    if (!options.secretKey)\r\n      throw new Error('Secret key is required, should be XXXX in length')\r\n    // hypercore doesn't seem to like the secret key being a discoveryKey,\r\n    // but rather just a Buffer\r\n    this.secretKey = Buffer.from(options.secretKey)\r\n    this.databaseName = options.databaseName || 'data'\r\n    this.peerHubs = options.peerHubs || [\r\n      'https://signalhub-jccqtwhdwc.now.sh/', // default public signaling server\r\n    ]\r\n    this.reduxStore = reduxStore\r\n\r\n    // Init an indexedDB\r\n    // I'm constructing a name here using the key because re-using the same name\r\n    // with different keys throws an error \"Another hypercore is stored here\"\r\n    const todos = rai(`${this.databaseName}-${this.getKeyHex().substr(0, 12)}`)\r\n    const storage = (filename: any) => todos(filename)\r\n\r\n    // Create a new hypercore feed\r\n    this.feed = hypercore(storage, this.key, {\r\n      secretKey: this.secretKey,\r\n      valueEncoding: 'utf-8',\r\n      crypto: mockCrypto,\r\n    })\r\n    this.feed.on('error', (err: any) => console.log(err))\r\n\r\n    this.feed.on('ready', () => {\r\n      console.log('ready', this.key.toString('hex'))\r\n      console.log('discovery', this.feed.discoveryKey.toString('hex'))\r\n      this.joinSwarm()\r\n    })\r\n    this.startStreamReader()\r\n    // Inject our custom middleware using redux-dynamic-middlewares\r\n    // I did this because we need a middleware that can use our feed instance\r\n    // An alternative might be to instantiate Feed and then create the redux store,\r\n    // then you'd just need a Feed.assignStore(store) method or something to give this\r\n    // class a way to dispatch to the store.\r\n    addMiddleware(this.feedMiddleware)\r\n  }\r\n\r\n  // This middleware has an extra function at the beginning that takes\r\n  // a 'store' param, which we're not using so it's omitted.\r\n  // This is an implementation detail with redux-dynamic-middlewares\r\n  feedMiddleware: Middleware = store => next => action => {\r\n    // this.feed.append(JSON.stringify(action.payload.action))\r\n    const prevState = store.getState()\r\n    const result = next(action)\r\n    const nextState = store.getState()\r\n    const changes = automerge.getChanges(prevState, nextState)\r\n    changes.forEach(c => this.feed.append(JSON.stringify(c)))\r\n    return result\r\n  }\r\n\r\n  // middleware = ({ key }: Options): Middleware => {\r\n  //   return store => next => action => {\r\n  //     const result = next(action)\r\n  //     const nextState = store.getState()\r\n  //     save(key, nextState)\r\n  //     return result\r\n  //   }\r\n  // }\r\n\r\n  // Read items from this and peer feeds,\r\n  // then dispatch them to our redux store\r\n  startStreamReader = () => {\r\n    // Wire up reading from the feed\r\n    const stream = this.feed.createReadStream({ live: true })\r\n    stream.on('data', (value: string) => {\r\n      try {\r\n        const action = JSON.parse(value)\r\n        console.log('onData', action)\r\n        // duck typing so we only dispatch objects that are actions\r\n        if (false) this.reduxStore.dispatch(action)\r\n      } catch (err) {\r\n        console.log('feed read error', err)\r\n        console.log('feed stream returned an unknown value', value)\r\n      }\r\n    })\r\n  }\r\n\r\n  // Join our feed to the swarm and accept peers\r\n  joinSwarm = () => {\r\n    // could add option to disallow peer connectivity here\r\n    const hub = signalhub(this.getKeyHex(), this.peerHubs)\r\n    const sw = swarm(hub)\r\n    sw.on('peer', this.onPeerConnect)\r\n  }\r\n\r\n  // When a feed peer connects, replicate our feed to them\r\n  onPeerConnect = (peer: any, id: any) => {\r\n    console.log('peer', id, peer)\r\n    pump(\r\n      peer,\r\n      this.feed.replicate({\r\n        encrypt: false,\r\n        live: true,\r\n        upload: true,\r\n        download: true,\r\n      }),\r\n      peer\r\n    )\r\n  }\r\n\r\n  getKeyHex = () => this.key.toString('hex')\r\n}\r\n\r\nexport { CevitxeFeed as Feed }\r\n","import Automerge from 'automerge'\r\n\r\n// Builds a new automerge object from the object provided\r\nexport const initialize = <T>(obj: T) =>\r\n  Automerge.change(Automerge.init<T>(), 'initialize', (d: T) => {\r\n    for (const k in obj) {\r\n      d[k] = obj[k]\r\n    }\r\n  })\r\n","import Automerge from 'automerge'\r\n\r\nexport const load = <T>(key: string): T | null => {\r\n  const history = localStorage.getItem(key)\r\n  return history ? Automerge.load(history) : null\r\n}\r\n","import Automerge from 'automerge'\r\n\r\nexport const save = <T>(key: string, state: T): void => {\r\n  const history = Automerge.save(state)\r\n  localStorage.setItem(key, history)\r\n}\r\n","import { Middleware } from 'redux'\r\nimport { save } from './save'\r\n\r\ntype Options = {\r\n  key: string\r\n}\r\n\r\nexport const middleware = ({ key }: Options): Middleware => {\r\n  return store => next => action => {\r\n    const result = next(action)\r\n    const nextState = store.getState()\r\n    save(key, nextState)\r\n    return result\r\n  }\r\n}\r\n"],"names":["automergeReducer","proxyReducer","state","action","type","payload","msg","JSON","stringify","fn","Automerge","change","createDynamicMiddlewares","allDynamicMiddlewares","enhancer","store","next","chain","map","middleware","compose","addMiddleware","middlewares","removeMiddleware","index","findIndex","d","filter","_","mdwIndex","console","error","resetMiddlewares","dynamicMiddlewaresInstance","cevitxeMiddleware","mockCrypto","sign","data","sk","cb","crypto","verify","_sig","_data","_pk","CevitxeFeed","reduxStore","options","prevState","getState","result","nextState","automerge","getChanges","forEach","c","_this","feed","append","createReadStream","live","on","value","parse","log","err","hub","signalhub","getKeyHex","peerHubs","swarm","onPeerConnect","peer","id","pump","replicate","encrypt","upload","download","key","toString","Error","discoveryKey","Buffer","from","secretKey","databaseName","todos","rai","this","substr","hypercore","filename","valueEncoding","joinSwarm","startStreamReader","feedMiddleware","initialize","obj","init","k","load","history","localStorage","getItem","save","setItem"],"mappings":"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"}