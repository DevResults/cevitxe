{"version":3,"file":"cevitxe.umd.production.js","sources":["../src/dynamicMiddleware.ts","../src/mockCrypto.ts","../src/feed.ts","../src/save.ts","../src/constants.ts","../src/actions.ts","../src/adaptReducer.ts","../src/initialize.ts","../src/load.ts","../src/middleware.ts"],"sourcesContent":["import { compose, Middleware } from 'redux'\r\n\r\nconst createDynamicMiddlewares = () => {\r\n  let allDynamicMiddlewares: Middleware[] = []\r\n\r\n  const enhancer: Middleware = store => next => action => {\r\n    const chain = allDynamicMiddlewares.map(middleware => middleware(store))\r\n    return compose<Middleware>(...chain)(next)(action)\r\n  }\r\n\r\n  const addMiddleware = (...middlewares: Middleware[]) => {\r\n    allDynamicMiddlewares = [...allDynamicMiddlewares, ...middlewares]\r\n  }\r\n\r\n  const removeMiddleware = (middleware: Middleware) => {\r\n    const index = allDynamicMiddlewares.findIndex(d => d === middleware)\r\n\r\n    if (index === -1) {\r\n      console.error('Middleware does not exist!', middleware)\r\n      return\r\n    }\r\n\r\n    allDynamicMiddlewares = allDynamicMiddlewares.filter(\r\n      (_, mdwIndex) => mdwIndex !== index\r\n    )\r\n  }\r\n\r\n  const resetMiddlewares = () => {\r\n    allDynamicMiddlewares = []\r\n  }\r\n\r\n  return {\r\n    enhancer,\r\n    addMiddleware,\r\n    removeMiddleware,\r\n    resetMiddlewares,\r\n  }\r\n}\r\n\r\nconst dynamicMiddlewaresInstance = createDynamicMiddlewares()\r\n\r\nexport const cevitxeMiddleware = dynamicMiddlewaresInstance.enhancer\r\n\r\nexport const {\r\n  addMiddleware,\r\n  removeMiddleware,\r\n  resetMiddlewares,\r\n} = dynamicMiddlewaresInstance\r\n\r\nexport { createDynamicMiddlewares }\r\n","import crypto from 'hypercore-crypto';\r\n// TODO: Get crypto working properly\r\n// This is a hack because I was getting errors verifying the remove signature\r\n// I took the code from hypercore and am just always returning true for the verification\r\n// We need to look deeper into why it's not signing properly or maybe just provide our\r\n// own crypto methods here.\r\nexport const mockCrypto = {\r\n  sign: (data: any, sk: any, cb: any) => {\r\n    return cb(null, crypto.sign(data, sk));\r\n  },\r\n  verify: (_sig: any, _data: any, _pk: any, cb: any) => {\r\n    // Always say it's a valid signature (for testing)\r\n    return cb(null, true);\r\n  },\r\n};\r\n","//import automerge from 'automerge'\r\nimport { Buffer } from 'buffer'\r\nimport hypercore from 'hypercore'\r\nimport crypto from 'hypercore-crypto'\r\nimport pump from 'pump'\r\nimport rai from 'random-access-idb'\r\nimport { createStore as createReduxStore, Reducer, Action, StoreEnhancer, Store, DeepPartial } from 'redux'\r\nimport signalhub from 'signalhub'\r\nimport swarm from 'webrtc-swarm'\r\n\r\n//import { actions } from './actions'\r\n//import { addMiddleware } from './dynamicMiddleware'\r\nimport { mockCrypto } from './mockCrypto'\r\n\r\n// This is currently a class but might make more sense as just a function\r\nconst CevitxeFeed = () => {\r\n  // private reduxStore: Store\r\n  let feed: Feed<any>\r\n  let databaseName: string\r\n  let key: Key\r\n  let secretKey: Key\r\n  let peerHubs: Array<string>\r\n\r\n  const createFeed = (options: any) => {\r\n    if (!options.key)\r\n      throw new Error('Key is required, should be XXXX in length')\r\n    // hypercore seems to be happy when I turn the key into a discoveryKey,\r\n    // maybe we could get away with just using a Buffer (or just calling discoveryKey with a string?)\r\n    key = crypto.discoveryKey(Buffer.from(options.key))\r\n    if (!options.secretKey)\r\n      throw new Error('Secret key is required, should be XXXX in length')\r\n\r\n    // hypercore doesn't seem to like the secret key being a discoveryKey,\r\n    // but rather just a Buffer\r\n    secretKey = Buffer.from(options.secretKey)\r\n    databaseName = options.databaseName || 'data'\r\n    peerHubs = options.peerHubs || [\r\n      'https://signalhub-jccqtwhdwc.now.sh/', // default public signaling server\r\n    ]\r\n\r\n    // Init an indexedDB\r\n    // I'm constructing a name here using the key because re-using the same name\r\n    // with different keys throws an error \"Another hypercore is stored here\"\r\n    const todos = rai(`${databaseName}-${getKeyHex().substr(0, 12)}`)\r\n    const storage = (filename: any) => todos(filename)\r\n\r\n    // Create a new hypercore feed\r\n    feed = hypercore(storage, key, {\r\n      secretKey: secretKey,\r\n      valueEncoding: 'utf-8',\r\n      crypto: mockCrypto,\r\n    })\r\n    feed.on('error', (err: any) => console.log(err))\r\n\r\n    feed.on('ready', () => {\r\n      console.log('ready', key.toString('hex'))\r\n      console.log('discovery', feed.discoveryKey.toString('hex'))\r\n      joinSwarm()\r\n    })\r\n\r\n    startStreamReader()\r\n\r\n    // Inject our custom middleware using redux-dynamic-middlewares\r\n    // I did this because we need a middleware that can use our feed instance\r\n    // An alternative might be to instantiate Feed and then create the redux store,\r\n    // then you'd just need a Feed.assignStore(store) method or something to give this\r\n    // class a way to dispatch to the store.\r\n    //addMiddleware(feedMiddleware)\r\n\r\n    return { createStore }\r\n  }\r\n\r\n  // This middleware has an extra function at the beginning that takes\r\n  // a 'store' param, which we're not using so it's omitted.\r\n  // This is an implementation detail with redux-dynamic-middlewares\r\n  // const feedMiddleware: Middleware = store => next => action => {\r\n  //   // feed.append(JSON.stringify(action.payload.action))\r\n  //   const prevState = store.getState()\r\n  //   const result = next(action)\r\n  //   const nextState = store.getState()\r\n  //   const changes = automerge.getChanges(prevState, nextState)\r\n  //   changes.forEach(c => feed.append(JSON.stringify(c)))\r\n  //   return result\r\n  // }\r\n\r\n  // Read items from this and peer feeds,\r\n  // then dispatch them to our redux store\r\n  const startStreamReader = () => {\r\n    // Wire up reading from the feed\r\n    const stream = feed.createReadStream({ live: true })\r\n    stream.on('data', (value: string) => {\r\n      try {\r\n        const change = JSON.parse(value)\r\n        console.log('onData', change)\r\n        //reduxStore.dispatch(actions.applyChange(change))\r\n      } catch (err) {\r\n        console.log('feed read error', err)\r\n        console.log('feed stream returned an unknown value', value)\r\n      }\r\n    })\r\n  }\r\n\r\n  // Join our feed to the swarm and accept peers\r\n  const joinSwarm = () => {\r\n    // could add option to disallow peer connectivity here\r\n    const hub = signalhub(getKeyHex(), peerHubs)\r\n    const sw = swarm(hub)\r\n    sw.on('peer', onPeerConnect)\r\n  }\r\n\r\n  // When a feed peer connects, replicate our feed to them\r\n  const onPeerConnect = (peer: any, id: any) => {\r\n    console.log('peer', id, peer)\r\n    pump(\r\n      peer,\r\n      feed.replicate({\r\n        encrypt: false,\r\n        live: true,\r\n        upload: true,\r\n        download: true,\r\n      }),\r\n      peer\r\n    ) \r\n  }\r\n\r\n  const getKeyHex = () => key.toString('hex')\r\n  \r\n  // This follows the type definitions for StoreCreator's two overloads in the Redux source\r\n  function createStore <S, A extends Action>(reducer: Reducer<S, A>, enhancer?: StoreEnhancer<any>): Store<S, A>\r\n  function createStore <S, A extends Action>(reducer: Reducer<S, A>, preloadedState?: DeepPartial<S>, enhancer?: StoreEnhancer<any>): Store<S, A>\r\n  function createStore <S, A extends Action>(reducer: Reducer<S, A>, preloadedState_orEnhancer?: DeepPartial<S> | StoreEnhancer<any>, enhancer_or_undefined?: StoreEnhancer<any>) {\r\n    let enhancer: StoreEnhancer<any>\r\n    let preloadedState: DeepPartial<S> | StoreEnhancer<any> | undefined\r\n\r\n    if (enhancer_or_undefined !== undefined) {\r\n      preloadedState = preloadedState_orEnhancer\r\n      enhancer = enhancer_or_undefined\r\n    } else {\r\n      enhancer = preloadedState_orEnhancer as StoreEnhancer<any>\r\n    }\r\n    \r\n    console.log('add a feed-enabled reducer here')\r\n    // inject our reducer here\r\n    if (preloadedState !== undefined)\r\n      return createReduxStore(reducer, preloadedState as DeepPartial<S>, enhancer as StoreEnhancer<any>);\r\n    return createReduxStore(reducer, enhancer as StoreEnhancer<any>);\r\n  }\r\n\r\n  return { createFeed }\r\n}\r\n\r\nconst feedInstance = CevitxeFeed();\r\n\r\nexport const {\r\n  createFeed\r\n} = feedInstance\r\n\r\n// export const { CevitxeFeed as Feed }\r\n","import automerge from 'automerge'\r\n\r\nexport const save = <T>(key: string, state: T): void => {\r\n  const history = automerge.save(state)\r\n  localStorage.setItem(key, history)\r\n}\r\n","export const APPLY_CHANGE = 'cevitxe/APPLY_CHANGE';\r\n","import { Change } from './types'\r\nimport { APPLY_CHANGE } from './constants'\r\n\r\nexport const actions = {\r\n  applyChange: (change: Change) => ({\r\n    type: APPLY_CHANGE,\r\n    payload: { change },\r\n  }),\r\n}\r\n","import { ReducerAdapter } from './types'\r\nimport automerge from 'automerge'\r\nimport { APPLY_CHANGE } from './constants'\r\n\r\nexport const adaptReducer: ReducerAdapter = proxyReducer => (\r\n  state,\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case APPLY_CHANGE: {\r\n      console.log('APPLY_CHANGE REDUCER!!!!', payload)\r\n      const newState = automerge.applyChanges(state, [payload.change])\r\n      console.log(newState)\r\n      return newState \r\n    }\r\n    default: {\r\n      const msg = `${type}: ${JSON.stringify(payload)}`\r\n      const fn = proxyReducer({ type, payload })\r\n      return fn && state\r\n        ? automerge.change(state, msg, fn) // return a modified Automerge object\r\n        : state // no matching change function was found, return state unchanged\r\n    }\r\n  }\r\n}\r\n","import automerge from 'automerge'\r\n\r\n// Builds a new automerge object from the object provided\r\nexport const initialize = <T>(obj: T) =>\r\n  automerge.change(automerge.init<T>(), 'initialize', (d: T) => {\r\n    for (const k in obj) {\r\n      d[k] = obj[k]\r\n    }\r\n  })\r\n","import automerge from 'automerge'\r\n\r\nexport const load = <T>(key: string): T | null => {\r\n  const history = localStorage.getItem(key)\r\n  return history ? automerge.load(history) : null\r\n}\r\n","import { Middleware } from 'redux'\r\nimport { save } from './save'\r\n\r\ntype Options = {\r\n  key: string\r\n}\r\n\r\nexport const middleware = ({ key }: Options): Middleware => {\r\n  return store => next => action => {\r\n    const result = next(action)\r\n    const nextState = store.getState()\r\n    save(key, nextState)\r\n    return result\r\n  }\r\n}\r\n"],"names":["createDynamicMiddlewares","allDynamicMiddlewares","enhancer","store","next","action","chain","map","middleware","compose","addMiddleware","middlewares","removeMiddleware","index","findIndex","d","filter","_","mdwIndex","console","error","resetMiddlewares","dynamicMiddlewaresInstance","cevitxeMiddleware","mockCrypto","sign","data","sk","cb","crypto","verify","_sig","_data","_pk","createFeed","feed","key","secretKey","peerHubs","onPeerConnect","peer","id","log","pump","replicate","encrypt","live","upload","download","getKeyHex","toString","createStore","reducer","preloadedState_orEnhancer","enhancer_or_undefined","preloadedState","undefined","createReduxStore","options","Error","discoveryKey","Buffer","from","todos","rai","databaseName","substr","hypercore","filename","valueEncoding","on","err","hub","signalhub","swarm","createReadStream","value","change","JSON","parse","CevitxeFeed","save","state","history","automerge","localStorage","setItem","applyChange","type","payload","proxyReducer","newState","applyChanges","msg","stringify","fn","obj","init","k","getItem","load","result","nextState","getState"],"mappings":"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"}