{"version":3,"file":"cevitxe.umd.production.js","sources":["../src/initialize.ts","../src/mockCrypto.ts","../src/feed.ts","../src/actions.ts","../src/constants.ts","../src/adaptReducer.ts"],"sourcesContent":["import automerge from 'automerge'\r\n\r\n// Builds a new automerge object from the object provided\r\nexport const initialize = <T>(obj: T) =>\r\n  automerge.change(automerge.init<T>(), 'initialize', (d: T) => {\r\n    for (const k in obj) {\r\n      d[k] = obj[k]\r\n    }\r\n  })\r\n","import crypto from 'hypercore-crypto';\r\n// TODO: Get crypto working properly\r\n// This is a hack because I was getting errors verifying the remove signature\r\n// I took the code from hypercore and am just always returning true for the verification\r\n// We need to look deeper into why it's not signing properly or maybe just provide our\r\n// own crypto methods here.\r\nexport const mockCrypto = {\r\n  sign: (data: any, sk: any, cb: any) => {\r\n    return cb(null, crypto.sign(data, sk));\r\n  },\r\n  verify: (_sig: any, _data: any, _pk: any, cb: any) => {\r\n    // Always say it's a valid signature (for testing)\r\n    return cb(null, true);\r\n  },\r\n};\r\n","import automerge from 'automerge'\r\nimport { Buffer } from 'buffer'\r\nimport hypercore from 'hypercore'\r\nimport crypto from 'hypercore-crypto'\r\nimport pump from 'pump'\r\nimport rai from 'random-access-idb'\r\n//import reduceReducers from 'reduce-reducers'\r\nimport {\r\n  //Action,\r\n  applyMiddleware,\r\n  createStore as reduxCreateStore,\r\n  //DeepPartial,\r\n  Middleware,\r\n  Reducer,\r\n  Store,\r\n  //Store,\r\n  //StoreEnhancer,\r\n} from 'redux'\r\nimport signalhub from 'signalhub'\r\nimport swarm from 'webrtc-swarm'\r\n//import { adaptReducer } from './adaptReducer'\r\nimport { initialize } from './initialize'\r\nimport { actions } from './actions'\r\nimport { mockCrypto } from './mockCrypto'\r\n\r\nexport const keyString =\r\n  'ecc6212465b39a9a704d564f07da0402af210888e730f419a7faf5f347a33b3d'\r\nexport const secretKeyString =\r\n  '2234567890abcdef1234567880abcdef1234567890abcdef1234567890fedcba'\r\n\r\n// hypercore seems to be happy when I turn the key into a discoveryKey,\r\n// maybe we could get away with just using a Buffer (or just calling discoveryKey with a string?)\r\nconst key: Key = crypto.discoveryKey(Buffer.from(keyString))\r\n// hypercore doesn't seem to like the secret key being a discoveryKey,\r\n// but rather just a Buffer\r\nconst secretKey: Key = Buffer.from(secretKeyString)\r\n\r\ninterface CevitxeStoreOptions {\r\n  // Redux store\r\n  reducer: Reducer\r\n  preloadedState?: any\r\n  middlewares?: Middleware[]\r\n  // hypercore feed options\r\n  databaseName?: string\r\n  peerHubs?: string[]\r\n}\r\n\r\n// This is currently a class but might make more sense as just a function\r\nconst CevitxeFeed = () => {\r\n  let feed: Feed<any>\r\n  let databaseName: string\r\n  let peerHubs: Array<string>\r\n  let reduxStore: Store\r\n\r\n  const createStore = (options: CevitxeStoreOptions): Promise<Store> => {\r\n    return new Promise((resolve, _) => {\r\n      databaseName = options.databaseName || 'data'\r\n      peerHubs = options.peerHubs || [\r\n        'https://signalhub-jccqtwhdwc.now.sh/', // default public signaling server\r\n      ]\r\n\r\n      // Init an indexedDB\r\n      const todos = rai(getStoreName())\r\n      const storage = (filename: any) => todos(filename)\r\n\r\n      // Create a new hypercore feed\r\n      feed = hypercore(storage, key, {\r\n        secretKey: secretKey,\r\n        valueEncoding: 'utf-8',\r\n        crypto: mockCrypto,\r\n      })\r\n      feed.on('error', (err: any) => console.log(err))\r\n\r\n      feed.on('ready', () => {\r\n        console.log('ready', key.toString('hex'))\r\n        console.log('discovery', feed.discoveryKey.toString('hex'))\r\n        joinSwarm()\r\n\r\n        reduxStore = createReduxStore({\r\n          ...options,\r\n          preloadedState: feed.length === 0 ? options.preloadedState : null,\r\n        })\r\n\r\n        if (feed.length === 0) {\r\n          // Write the initial automerge state to the feed\r\n          const storeState = reduxStore.getState()\r\n          const history = automerge.getChanges(automerge.init(), storeState)\r\n          history.forEach(c => feed.append(JSON.stringify(c)))\r\n          console.log('writing initial state to feed')\r\n          // write history as an array of changes, abondonded for individual change writing\r\n          //feed.append(JSON.stringify(history))\r\n        }\r\n\r\n        resolve(reduxStore)\r\n      })\r\n\r\n      startStreamReader()\r\n    })\r\n  }\r\n\r\n  const feedMiddleware: Middleware = store => next => action => {\r\n    // feed.append(JSON.stringify(action.payload.action))\r\n    const prevState = store.getState()\r\n    const result = next(action)\r\n    // Don't re-write items to the feed\r\n    if (action.payload.fromCevitxe) {\r\n      console.log('already from cevitxe, skipping the feed write')\r\n      return result\r\n    }\r\n    const nextState = store.getState()\r\n    const existingState = prevState ? prevState : automerge.init()\r\n    console.log('existingState', existingState)\r\n    console.log('nextState', nextState)\r\n    const changes = automerge.getChanges(existingState, nextState)\r\n    changes.forEach(c => feed.append(JSON.stringify(c)))\r\n    return result\r\n  }\r\n\r\n  // Read items from this and peer feeds,\r\n  // then dispatch them to our redux store\r\n  const startStreamReader = () => {\r\n    // Wire up reading from the feed\r\n    const stream = feed.createReadStream({ live: true })\r\n    stream.on('data', (value: string) => {\r\n      // try {\r\n      const change = JSON.parse(value)\r\n      console.log('onData', change)\r\n      reduxStore.dispatch(actions.applyChange(change))\r\n      // } catch (err) {\r\n      //   console.log('feed read error', err)\r\n      //   console.log('feed stream returned an unknown value', value)\r\n      // }\r\n    })\r\n  }\r\n\r\n  // Join our feed to the swarm and accept peers\r\n  const joinSwarm = () => {\r\n    // could add option to disallow peer connectivity here\r\n    const hub = signalhub(getKeyHex(), peerHubs)\r\n    const sw = swarm(hub)\r\n    sw.on('peer', onPeerConnect)\r\n  }\r\n\r\n  // When a feed peer connects, replicate our feed to them\r\n  const onPeerConnect = (peer: any, id: any) => {\r\n    console.log('peer', id, peer)\r\n    pump(\r\n      peer,\r\n      feed.replicate({\r\n        encrypt: false,\r\n        live: true,\r\n        upload: true,\r\n        download: true,\r\n      }),\r\n      peer\r\n    )\r\n  }\r\n\r\n  const getKeyHex = () => key.toString('hex')\r\n  // I'm constructing a name here using the key because re-using the same name\r\n  // with different keys throws an error \"Another hypercore is stored here\"\r\n  const getStoreName = () => `${databaseName}-${getKeyHex().substr(0, 12)}`\r\n\r\n  const createReduxStore = (options: CevitxeStoreOptions) => {\r\n    // let enhancer: StoreEnhancer<any> | undefined\r\n    let initialState: any\r\n    // let preloadedStateProvided: Boolean = false\r\n\r\n    // // We received 2 params: reducer and enhancer\r\n    // if (\r\n    //   typeof preloadedState_orEnhancer === 'function' &&\r\n    //   typeof enhancer_or_undefined === 'undefined'\r\n    // ) {\r\n    //   enhancer = preloadedState_orEnhancer\r\n    //   initialState = undefined\r\n    // } else {\r\n    //   preloadedStateProvided = true\r\n    //   enhancer = enhancer_or_undefined\r\n    //   // Convert the plain object preloadedState to Automerge using initialize()\r\n    //   initialState = initialize(preloadedState_orEnhancer as DeepPartial<\r\n    //     S\r\n    //   > | null)\r\n    //   //initialState = preloadedState_orEnhancer as DeepPartial<S> | null\r\n    //   console.log('initialized state', initialState)\r\n    //   // TODO: Push the initial state operations to the feed\r\n    // }\r\n\r\n    let optionMiddlewares = options.middlewares ? options.middlewares : []\r\n    const middlewares = [...optionMiddlewares, feedMiddleware]\r\n    // check\r\n    //if (enhancer !== undefined) middlewares.push(enhancer)\r\n\r\n    console.log('adding a feed-enabled reducer here')\r\n\r\n    // Add the cevitxe reducer at the same level as the user's reducer\r\n    // This allows us to operate at the root state and the user can still\r\n    // have nested state reducers.\r\n    // note: Casting these as Reducer may not be right\r\n    // const combinedReducers = reduceReducers(\r\n    //   null,\r\n    //   adaptReducer as Reducer,\r\n    //   reducer as Reducer\r\n    // )\r\n    // console.log('combined reducers', combinedReducers)\r\n\r\n    if (options.preloadedState) {\r\n      // Convert the plain object preloadedState to Automerge using initialize()\r\n      initialState = initialize(options.preloadedState)\r\n      console.log('initialized state', initialState)\r\n      // TODO: Push the initial state operations to the feed\r\n\r\n      console.log('creating redux store with initial state', initialState)\r\n      return reduxCreateStore(\r\n        options.reducer,\r\n        initialState,\r\n        applyMiddleware(...middlewares)\r\n      )\r\n    }\r\n    console.log('creating redux store without initial state')\r\n    return reduxCreateStore(\r\n      options.reducer as Reducer,\r\n      applyMiddleware(...middlewares)\r\n    )\r\n  }\r\n\r\n  return { createStore }\r\n}\r\n\r\nconst feedInstance = CevitxeFeed()\r\n\r\nexport const { createStore } = feedInstance\r\n\r\n// export const { CevitxeFeed as Feed }\r\n","import { Change } from './types'\r\nimport { APPLY_CHANGE } from './constants'\r\n\r\nexport const actions = {\r\n  applyChange: (change: Change) => ({\r\n    type: APPLY_CHANGE,\r\n    payload: { change, fromCevitxe: true },\r\n  }),\r\n}\r\n","export const APPLY_CHANGE = 'cevitxe/APPLY_CHANGE';\r\n","import { ReducerAdapter } from './types'\r\nimport automerge from 'automerge'\r\nimport { APPLY_CHANGE } from './constants'\r\n\r\nexport const adaptReducer: ReducerAdapter = proxyReducer => (\r\n  state,\r\n  { type, payload }\r\n) => {\r\n  switch (type) {\r\n    case APPLY_CHANGE: {\r\n      //return state\r\n      console.log('APPLY_CHANGE REDUCER!!!!', payload)\r\n      const { change } = payload\r\n      let startingState = state\r\n      if (change.message === 'initialize') {\r\n        startingState = automerge.init()\r\n        console.log('found initialize', change)\r\n      }\r\n      const newState = automerge.applyChanges(startingState, [change])\r\n      console.log(newState)\r\n      return newState\r\n    }\r\n    default: {\r\n      const msg = `${type}: ${JSON.stringify(payload)}`\r\n      const fn = proxyReducer({ type, payload })\r\n      return fn && state\r\n        ? automerge.change(state, msg, fn) // return a modified Automerge object\r\n        : state // no matching change function was found, return state unchanged\r\n    }\r\n  }\r\n}\r\n"],"names":["initialize","obj","automerge","change","init","d","k","mockCrypto","sign","data","sk","cb","crypto","verify","_sig","_data","_pk","keyString","secretKeyString","key","discoveryKey","from","secretKey","createStore","feed","peerHubs","reduxStore","feedMiddleware","store","next","action","prevState","getState","result","payload","fromCevitxe","console","log","nextState","existingState","getChanges","forEach","c","append","JSON","stringify","onPeerConnect","peer","id","pump","replicate","encrypt","live","upload","download","getKeyHex","toString","options","Promise","resolve","_","todos","rai","databaseName","substr","hypercore","filename","valueEncoding","on","err","hub","signalhub","swarm","initialState","middlewares","preloadedState","reduxCreateStore","reducer","applyMiddleware","createReduxStore","length","storeState","createReadStream","value","parse","dispatch","type","actions","CevitxeFeed","proxyReducer","state","startingState","message","newState","applyChanges","msg","fn"],"mappings":"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"}