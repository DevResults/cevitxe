{"version":3,"file":"cevitxe.cjs.development.js","sources":["../src/automergeReducer.ts","../src/dynamicMiddleware.ts","../src/mockCrypto.ts","../src/feed.ts","../src/initialize.ts","../src/load.ts","../src/save.ts","../src/middleware.ts"],"sourcesContent":["import Automerge from 'automerge'\r\nimport { Reducer } from 'redux'\r\nimport { Action } from './types'\r\nimport { ProxyReducer } from './types'\r\n\r\ntype AR = <T>(proxyReducer: ProxyReducer<T>) => Reducer<T | undefined, Action>\r\n\r\nexport const automergeReducer: AR = proxyReducer => (state, action) => {\r\n  const { type, payload } = action\r\n  const msg = `${type}: ${JSON.stringify(payload)}`\r\n  const fn = proxyReducer({ type, payload })\r\n  return fn && state\r\n    ? Automerge.change(state, msg, fn) // return a modified Automerge object\r\n    : state // no matching change function was found, return state unchanged\r\n}\r\n","import { compose, Middleware } from 'redux'\r\n\r\nconst createDynamicMiddlewares = () => {\r\n  let allDynamicMiddlewares: Middleware[] = []\r\n\r\n  const enhancer: Middleware = store => next => action => {\r\n    const chain = allDynamicMiddlewares.map(middleware => middleware(store))\r\n    return compose<Middleware>(...chain)(next)(action)\r\n  }\r\n\r\n  const addMiddleware = (...middlewares: Middleware[]) => {\r\n    allDynamicMiddlewares = [...allDynamicMiddlewares, ...middlewares]\r\n  }\r\n\r\n  const removeMiddleware = (middleware: Middleware) => {\r\n    const index = allDynamicMiddlewares.findIndex(d => d === middleware)\r\n\r\n    if (index === -1) {\r\n      console.error('Middleware does not exist!', middleware)\r\n      return\r\n    }\r\n\r\n    allDynamicMiddlewares = allDynamicMiddlewares.filter(\r\n      (_, mdwIndex) => mdwIndex !== index\r\n    )\r\n  }\r\n\r\n  const resetMiddlewares = () => {\r\n    allDynamicMiddlewares = []\r\n  }\r\n\r\n  return {\r\n    enhancer,\r\n    addMiddleware,\r\n    removeMiddleware,\r\n    resetMiddlewares,\r\n  }\r\n}\r\n\r\nconst dynamicMiddlewaresInstance = createDynamicMiddlewares()\r\n\r\nexport const cevitxeMiddleware = dynamicMiddlewaresInstance.enhancer\r\n\r\nexport const {\r\n  addMiddleware,\r\n  removeMiddleware,\r\n  resetMiddlewares,\r\n} = dynamicMiddlewaresInstance\r\n\r\nexport { createDynamicMiddlewares }\r\n","import crypto from 'hypercore-crypto';\r\n// TODO: Get crypto working properly\r\n// This is a hack because I was getting errors verifying the remove signature\r\n// I took the code from hypercore and am just always returning true for the verification\r\n// We need to look deeper into why it's not signing properly or maybe just provide our\r\n// own crypto methods here.\r\nexport const mockCrypto = {\r\n  sign: (data: any, sk: any, cb: any) => {\r\n    return cb(null, crypto.sign(data, sk));\r\n  },\r\n  verify: (_sig: any, _data: any, _pk: any, cb: any) => {\r\n    // Always say it's a valid signature (for testing)\r\n    return cb(null, true);\r\n  },\r\n};\r\n","import { Buffer } from 'buffer'\r\nimport hypercore from 'hypercore'\r\nimport crypto from 'hypercore-crypto'\r\nimport pump from 'pump'\r\nimport rai from 'random-access-idb'\r\nimport { Store, Middleware } from 'redux'\r\nimport signalhub from 'signalhub'\r\nimport swarm from 'webrtc-swarm'\r\nimport { addMiddleware } from './dynamicMiddleware'\r\nimport { mockCrypto } from './mockCrypto'\r\nimport automerge from 'automerge'\r\n\r\n// This is currently a class but might make more sense as just a function\r\nclass CevitxeFeed {\r\n  private reduxStore: Store\r\n  private feed: Feed<any>\r\n  private databaseName: string\r\n  private key: Key\r\n  private secretKey: Key\r\n  private peerHubs: Array<string>\r\n\r\n  constructor(reduxStore: any, options: any) {\r\n    if (!options.key)\r\n      throw new Error('Key is required, should be XXXX in length')\r\n    // hypercore seems to be happy when I turn the key into a discoveryKey,\r\n    // maybe we could get away with just using a Buffer (or just calling discoveryKey with a string?)\r\n    this.key = crypto.discoveryKey(Buffer.from(options.key))\r\n    if (!options.secretKey)\r\n      throw new Error('Secret key is required, should be XXXX in length')\r\n    // hypercore doesn't seem to like the secret key being a discoveryKey,\r\n    // but rather just a Buffer\r\n    this.secretKey = Buffer.from(options.secretKey)\r\n    this.databaseName = options.databaseName || 'data'\r\n    this.peerHubs = options.peerHubs || [\r\n      'https://signalhub-jccqtwhdwc.now.sh/', // default public signaling server\r\n    ]\r\n    this.reduxStore = reduxStore\r\n\r\n    // Init an indexedDB\r\n    // I'm constructing a name here using the key because re-using the same name\r\n    // with different keys throws an error \"Another hypercore is stored here\"\r\n    const todos = rai(`${this.databaseName}-${this.getKeyHex().substr(0, 12)}`)\r\n    const storage = (filename: any) => todos(filename)\r\n\r\n    // Create a new hypercore feed\r\n    this.feed = hypercore(storage, this.key, {\r\n      secretKey: this.secretKey,\r\n      valueEncoding: 'utf-8',\r\n      crypto: mockCrypto,\r\n    })\r\n    this.feed.on('error', (err: any) => console.log(err))\r\n\r\n    this.feed.on('ready', () => {\r\n      console.log('ready', this.key.toString('hex'))\r\n      console.log('discovery', this.feed.discoveryKey.toString('hex'))\r\n      this.joinSwarm()\r\n    })\r\n    this.startStreamReader()\r\n    // Inject our custom middleware using redux-dynamic-middlewares\r\n    // I did this because we need a middleware that can use our feed instance\r\n    // An alternative might be to instantiate Feed and then create the redux store,\r\n    // then you'd just need a Feed.assignStore(store) method or something to give this\r\n    // class a way to dispatch to the store.\r\n    addMiddleware(this.feedMiddleware)\r\n  }\r\n\r\n  // This middleware has an extra function at the beginning that takes\r\n  // a 'store' param, which we're not using so it's omitted.\r\n  // This is an implementation detail with redux-dynamic-middlewares\r\n  feedMiddleware: Middleware = store => next => action => {\r\n    // this.feed.append(JSON.stringify(action.payload.action))\r\n    const prevState = store.getState()\r\n    const result = next(action)\r\n    const nextState = store.getState()\r\n    const changes = automerge.getChanges(prevState, nextState)\r\n    changes.forEach(c => this.feed.append(JSON.stringify(c)))\r\n    return result\r\n  }\r\n\r\n  // middleware = ({ key }: Options): Middleware => {\r\n  //   return store => next => action => {\r\n  //     const result = next(action)\r\n  //     const nextState = store.getState()\r\n  //     save(key, nextState)\r\n  //     return result\r\n  //   }\r\n  // }\r\n\r\n  // Read items from this and peer feeds,\r\n  // then dispatch them to our redux store\r\n  startStreamReader = () => {\r\n    // Wire up reading from the feed\r\n    const stream = this.feed.createReadStream({ live: true })\r\n    stream.on('data', (value: string) => {\r\n      try {\r\n        const action = JSON.parse(value)\r\n        console.log('onData', action)\r\n        // duck typing so we only dispatch objects that are actions\r\n        if (false) this.reduxStore.dispatch(action)\r\n      } catch (err) {\r\n        console.log('feed read error', err)\r\n        console.log('feed stream returned an unknown value', value)\r\n      }\r\n    })\r\n  }\r\n\r\n  // Join our feed to the swarm and accept peers\r\n  joinSwarm = () => {\r\n    // could add option to disallow peer connectivity here\r\n    const hub = signalhub(this.getKeyHex(), this.peerHubs)\r\n    const sw = swarm(hub)\r\n    sw.on('peer', this.onPeerConnect)\r\n  }\r\n\r\n  // When a feed peer connects, replicate our feed to them\r\n  onPeerConnect = (peer: any, id: any) => {\r\n    console.log('peer', id, peer)\r\n    pump(\r\n      peer,\r\n      this.feed.replicate({\r\n        encrypt: false,\r\n        live: true,\r\n        upload: true,\r\n        download: true,\r\n      }),\r\n      peer\r\n    )\r\n  }\r\n\r\n  getKeyHex = () => this.key.toString('hex')\r\n}\r\n\r\nexport { CevitxeFeed as Feed }\r\n","import Automerge from 'automerge'\r\n\r\n// Builds a new automerge object from the object provided\r\nexport const initialize = <T>(obj: T) =>\r\n  Automerge.change(Automerge.init<T>(), 'initialize', (d: T) => {\r\n    for (const k in obj) {\r\n      d[k] = obj[k]\r\n    }\r\n  })\r\n","import Automerge from 'automerge'\r\n\r\nexport const load = <T>(key: string): T | null => {\r\n  const history = localStorage.getItem(key)\r\n  return history ? Automerge.load(history) : null\r\n}\r\n","import Automerge from 'automerge'\r\n\r\nexport const save = <T>(key: string, state: T): void => {\r\n  const history = Automerge.save(state)\r\n  localStorage.setItem(key, history)\r\n}\r\n","import { Middleware } from 'redux'\r\nimport { save } from './save'\r\n\r\ntype Options = {\r\n  key: string\r\n}\r\n\r\nexport const middleware = ({ key }: Options): Middleware => {\r\n  return store => next => action => {\r\n    const result = next(action)\r\n    const nextState = store.getState()\r\n    save(key, nextState)\r\n    return result\r\n  }\r\n}\r\n"],"names":["automergeReducer","proxyReducer","state","action","type","payload","msg","JSON","stringify","fn","Automerge","change","createDynamicMiddlewares","allDynamicMiddlewares","enhancer","store","next","chain","map","middleware","compose","addMiddleware","middlewares","removeMiddleware","index","findIndex","d","console","error","filter","_","mdwIndex","resetMiddlewares","dynamicMiddlewaresInstance","cevitxeMiddleware","mockCrypto","sign","data","sk","cb","crypto","verify","_sig","_data","_pk","CevitxeFeed","reduxStore","options","prevState","getState","result","nextState","changes","automerge","getChanges","forEach","c","feed","append","stream","createReadStream","live","on","value","parse","log","dispatch","err","hub","signalhub","getKeyHex","peerHubs","sw","swarm","onPeerConnect","peer","id","pump","replicate","encrypt","upload","download","key","toString","Error","discoveryKey","Buffer","from","secretKey","databaseName","todos","rai","substr","storage","filename","hypercore","valueEncoding","joinSwarm","startStreamReader","feedMiddleware","initialize","obj","init","k","load","history","localStorage","getItem","save","setItem"],"mappings":"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"}