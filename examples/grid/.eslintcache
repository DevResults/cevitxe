[{"C:\\git\\local-first-web\\state\\examples\\grid\\src\\index.tsx":"1","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\Shell.tsx":"2","C:\\git\\local-first-web\\state\\examples\\grid\\src\\redux\\store.ts":"3","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\App.tsx":"4","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\Loading.tsx":"5","C:\\git\\local-first-web\\state\\examples\\grid\\src\\redux\\reducers.ts":"6","C:\\git\\local-first-web\\state\\examples\\grid\\src\\ag-grid\\emptyGrid.ts":"7","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\Grid.tsx":"8","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\Toolbar.tsx":"9","C:\\git\\local-first-web\\state\\examples\\grid\\src\\redux\\actions.ts":"10","C:\\git\\local-first-web\\state\\examples\\grid\\src\\ag-grid\\buildColumnFromSchema.ts":"11","C:\\git\\local-first-web\\state\\examples\\grid\\src\\ag-grid\\commands\\deleteRowsCommand.ts":"12","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\DataGenerator.tsx":"13","C:\\git\\local-first-web\\state\\examples\\grid\\src\\inferSchema.ts":"14","C:\\git\\local-first-web\\state\\examples\\grid\\src\\utils\\nextFrame.ts":"15","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\dataGenerator.worker.ts":"16","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\dataGeneratorSchema.tsx":"17","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\ProgressBar.tsx":"18","C:\\git\\local-first-web\\state\\examples\\grid\\src\\ag-grid\\gridUtils.ts":"19"},{"size":304,"mtime":1608391390949,"results":"20","hashOfConfig":"21"},{"size":1190,"mtime":1608392754252,"results":"22","hashOfConfig":"21"},{"size":489,"mtime":1608389879767,"results":"23","hashOfConfig":"21"},{"size":380,"mtime":1608389879759,"results":"24","hashOfConfig":"21"},{"size":739,"mtime":1608392183858,"results":"25","hashOfConfig":"21"},{"size":3643,"mtime":1608389879767,"results":"26","hashOfConfig":"21"},{"size":700,"mtime":1608389879757,"results":"27","hashOfConfig":"21"},{"size":6201,"mtime":1608392778935,"results":"28","hashOfConfig":"21"},{"size":787,"mtime":1608392199047,"results":"29","hashOfConfig":"21"},{"size":1735,"mtime":1608392443550,"results":"30","hashOfConfig":"21"},{"size":535,"mtime":1608389879755,"results":"31","hashOfConfig":"21"},{"size":655,"mtime":1608389879756,"results":"32","hashOfConfig":"21"},{"size":2024,"mtime":1608392501081,"results":"33","hashOfConfig":"21"},{"size":758,"mtime":1608392021024,"results":"34","hashOfConfig":"21"},{"size":82,"mtime":1608389879768,"results":"35","hashOfConfig":"21"},{"size":470,"mtime":1608389879763,"results":"36","hashOfConfig":"21"},{"size":398,"mtime":1608389879763,"results":"37","hashOfConfig":"21"},{"size":528,"mtime":1608392190342,"results":"38","hashOfConfig":"21"},{"size":779,"mtime":1608389879757,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1n2zwrs",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"42"},"C:\\git\\local-first-web\\state\\examples\\grid\\src\\index.tsx",[],[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\Shell.tsx",[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\redux\\store.ts",["88"],"import { StoreManager } from '@localfirst/state'\r\nimport { emptyGrid } from '../ag-grid/emptyGrid'\r\nimport { proxyReducer } from './reducers'\r\nimport { GridState } from 'types'\r\n\r\nconst initialState = emptyGrid(3, 3) as GridState\r\n\r\nconst urls = process.env.REACT_APP_RELAYS ? process.env.REACT_APP_RELAYS.split(',') : undefined\r\n\r\nexport const storeManager = new StoreManager<GridState>({\r\n  databaseName: 'grid',\r\n  proxyReducer,\r\n  collections: ['rows'],\r\n  initialState,\r\n  urls,\r\n})\r\n","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\App.tsx",[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\Loading.tsx",[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\redux\\reducers.ts",["89"],"import { ChangeFn, ProxyReducer } from '@localfirst/state'\r\nimport { inferSchema } from 'inferSchema'\r\nimport { JSONSchema7 } from 'json-schema'\r\nimport { GridState } from '../types'\r\nimport * as actions from './actions'\r\n\r\nconst toArray = <T>(x: T | T[] | null) => (x === null ? [] : Array.isArray(x) ? x : [x])\r\n\r\nexport const proxyReducer: ProxyReducer<GridState> = (state, { type, payload }) => {\r\n  const collection = 'rows'\r\n  switch (type) {\r\n    case actions.ITEM_ADD: {\r\n      const newRows = toArray(payload)\r\n      return newRows.map((newRow) => {\r\n        const { id } = newRow\r\n        const fn = (row: any) => Object.assign(row, newRow)\r\n        return { collection, id, fn }\r\n      })\r\n    }\r\n\r\n    case actions.ITEM_UPDATE: {\r\n      const updatedRow = payload\r\n      const { id } = updatedRow\r\n      const fn = (row: any) => {\r\n        Object.assign(row, updatedRow)\r\n      }\r\n      return { collection, id, fn }\r\n    }\r\n\r\n    case actions.ITEM_REMOVE:\r\n      return {\r\n        collection,\r\n        id: payload.id,\r\n        delete: true,\r\n      }\r\n\r\n    case actions.COLLECTION_CLEAR:\r\n      return {\r\n        collection,\r\n        drop: true,\r\n      }\r\n\r\n    case actions.COLLECTION_LOAD: {\r\n      const newRows = toArray(payload.collection)\r\n      return newRows.map((newRow) => {\r\n        const { id } = newRow\r\n        const fn = (row: any) => Object.assign(row, newRow)\r\n        return { collection, id, fn }\r\n      })\r\n    }\r\n\r\n    case actions.SCHEMA_LOAD:\r\n      return (s: GridState) => {\r\n        s.schema = payload.schema\r\n      }\r\n\r\n    case actions.SCHEMA_INFER:\r\n      return (s) => {\r\n        s.schema = inferSchema(payload.sampleData)\r\n      }\r\n\r\n    case actions.FIELD_ADD:\r\n      return (s) => {\r\n        const fieldId = payload.id\r\n        s.schema.properties = s.schema.properties || {}\r\n        s.schema.properties[fieldId] = { description: 'New Field' }\r\n      }\r\n\r\n    case actions.FIELD_RENAME:\r\n      return (s) => {\r\n        const fieldSchema = s.schema.properties![payload.id] as JSONSchema7\r\n        fieldSchema.description = payload.description\r\n      }\r\n\r\n    case actions.FIELD_DELETE: {\r\n      const { id: fieldId } = payload\r\n\r\n      // remove field from schema\r\n      const schemaChange = (s: GridState) => {\r\n        delete s.schema.properties![fieldId]\r\n      }\r\n\r\n      // change function: delete the value from one row\r\n      const fn = (row: any) => {\r\n        delete row[fieldId]\r\n      }\r\n\r\n      const rowIds = Object.keys(state.rows)\r\n      const rowChanges = rowIds.map((id: string) => ({ collection, id, fn }))\r\n\r\n      return [schemaChange, ...rowChanges]\r\n    }\r\n\r\n    case actions.FIELD_SET_TYPE: {\r\n      const { id: fieldId, type: newType } = payload\r\n\r\n      // update schema\r\n      const schemaChange: ChangeFn<GridState> = (s) => {\r\n        const fieldSchema = s.schema.properties![fieldId] as JSONSchema7\r\n        fieldSchema.type = newType\r\n      }\r\n\r\n      // change function: update the column value in one row\r\n      const fn = (row: any) => {\r\n        if (row[fieldId] !== null) {\r\n          switch (newType) {\r\n            case 'number':\r\n              const number = Number(row[fieldId])\r\n              if (Number.isNaN(number)) row[fieldId] = ''\r\n              else row[fieldId] = number\r\n              break\r\n            case 'string':\r\n              row[fieldId] = String(row[fieldId])\r\n              break\r\n          }\r\n        }\r\n      }\r\n\r\n      const rowIds = Object.keys(state.rows)\r\n      const rowChanges = rowIds.map((id: string) => ({ collection, id, fn }))\r\n\r\n      return [schemaChange, ...rowChanges]\r\n    }\r\n\r\n    default:\r\n      return null\r\n  }\r\n}\r\n","C:\\git\\local-first-web\\state\\examples\\grid\\src\\ag-grid\\emptyGrid.ts",["90"],"import { JSONSchema7 } from 'json-schema'\r\nimport { range } from 'ramda'\r\n\r\nexport const emptyGrid = (rowCount: number, colCount: number = rowCount) => {\r\n  const rows = range(0, rowCount).map(i => `row_${i + 1}`)\r\n  const cols = range(0, colCount).map(i => `col_${i + 1}`)\r\n\r\n  const rowReducer = (rowMap: { [id: string]: any }, id: string) => ({\r\n    ...rowMap,\r\n    [id]: { id },\r\n  })\r\n\r\n  const columnReducer = (colMap: JSONSchema7['properties'], id: string, i: number) => ({\r\n    ...colMap,\r\n    [id]: { description: `Field ${i + 1}` },\r\n  })\r\n\r\n  const result = {\r\n    rows: rows.reduce(rowReducer, {}),\r\n    schema: { properties: cols.reduce(columnReducer, {}) },\r\n  }\r\n\r\n  return result\r\n}\r\n","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\Grid.tsx",["91"],"/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react'\r\nimport {\r\n  GetContextMenuItemsParams,\r\n  GetMainMenuItemsParams,\r\n  MenuItemDef,\r\n  ValueParserParams,\r\n  ValueSetterParams,\r\n} from 'ag-grid-community'\r\nimport { CellKeyPressEvent, ModelUpdatedEvent } from 'ag-grid-community/dist/lib/events'\r\nimport 'ag-grid-community/dist/styles/ag-grid.css'\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css'\r\nimport 'ag-grid-enterprise'\r\nimport { AgGridReact } from 'ag-grid-react'\r\nimport { debug } from 'debug'\r\nimport { useDialog } from 'muibox'\r\nimport { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { buildColumnFromSchema } from '../ag-grid/buildColumnFromSchema'\r\nimport { deleteRowsCommand } from '../ag-grid/commands/deleteRowsCommand'\r\nimport {\r\n  addField,\r\n  addItem,\r\n  deleteField,\r\n  renameField,\r\n  setFieldType,\r\n  updateItem,\r\n} from '../redux/actions'\r\nimport { Loading } from './Loading'\r\n\r\nconst log = debug('lf:grid')\r\n\r\nexport const Grid = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const ready = useSelector((state: any) => !!state && !!state.schema)\r\n\r\n  const rowCollection = useSelector((state: any) => {\r\n    if (!ready) return []\r\n    return Object.values(state.rows)\r\n  })\r\n\r\n  const columns = useSelector((state: any) => {\r\n    if (!ready) return []\r\n    const properties = state.schema.properties || {}\r\n    return Object.entries(properties).map(([field, schema]) => buildColumnFromSchema(field, schema))\r\n  })\r\n\r\n  const dialog = useDialog()\r\n\r\n  const [nextRowId, setNextRowId] = useState<string>()\r\n  const [nextColumn, setNextColumn] = useState<string>()\r\n\r\n  const handleKeyDown = (event: CellKeyPressEvent) => {\r\n    if (event.event) {\r\n      switch ((event.event as KeyboardEvent).key) {\r\n        case 'ArrowDown':\r\n        case 'Enter':\r\n          if (event.rowIndex === rowCollection.length - 1) {\r\n            const action = addItem()\r\n            setNextRowId(action.payload.id)\r\n            dispatch(action)\r\n          }\r\n          break\r\n        case 'ArrowRight':\r\n          if (event.colDef.field === columns[columns.length - 1].field) {\r\n            const action = addField()\r\n            setNextColumn(action.payload.id)\r\n            setNextRowId(event.data.id)\r\n            dispatch(action)\r\n          }\r\n          break\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleModelUpdated = (event: ModelUpdatedEvent) => {\r\n    if (nextRowId) {\r\n      const row = event.api.getRowNode(nextRowId)\r\n      if (row) {\r\n        const column = nextColumn\r\n          ? event.columnApi.getColumn(nextColumn)\r\n          : event.api.getFocusedCell().column\r\n        event.api.setFocusedCell(row.rowIndex, column)\r\n      }\r\n      setNextRowId(undefined)\r\n      setNextColumn(undefined)\r\n    }\r\n  }\r\n\r\n  const valueSetter = (params: ValueSetterParams) => {\r\n    if (params.newValue === params.oldValue) return false\r\n    switch (params.colDef.type) {\r\n      case 'numericColumn':\r\n        if (Number.isNaN(params.newValue)) return false\r\n    }\r\n    log('dispatching updateItem')\r\n\r\n    const update = {\r\n      id: params.data.id,\r\n      [params.colDef.field!]: params.newValue,\r\n    }\r\n    dispatch(updateItem(update))\r\n    return true\r\n  }\r\n\r\n  const valueParser = (params: ValueParserParams) => {\r\n    switch (params.colDef.type) {\r\n      case 'numericColumn':\r\n        return Number(params.newValue)\r\n      default:\r\n        return params.newValue\r\n    }\r\n  }\r\n\r\n  const deleteColumnCommand = (params: GetMainMenuItemsParams) => {\r\n    const colDef = params.column.getColDef()\r\n    dispatch(deleteField(colDef.field!))\r\n  }\r\n\r\n  const renameColumnCommand = (params: GetMainMenuItemsParams) => ({\r\n    name: 'Rename',\r\n    action: () => {\r\n      const colDef = params.column.getColDef()\r\n      const current = colDef.headerName\r\n      dialog\r\n        .prompt({\r\n          message: 'Rename Field',\r\n          required: true,\r\n          defaultValue: current,\r\n        })\r\n        .then((newName: string) => dispatch(renameField(colDef.field!, newName)))\r\n        .catch(() => {})\r\n    },\r\n  })\r\n\r\n  const getMainMenu = (params: GetMainMenuItemsParams) => {\r\n    const colDef = params.column.getColDef()\r\n    const items: MenuItemDef[] = [\r\n      renameColumnCommand(params),\r\n      { name: 'Delete', action: () => deleteColumnCommand(params) },\r\n      {\r\n        name: 'Change column type',\r\n        subMenu: [\r\n          {\r\n            name: 'Text',\r\n            //Temp hack\r\n            checked: colDef.type !== 'numericColumn',\r\n            action: () => dispatch(setFieldType(colDef.field!, 'string')),\r\n          },\r\n          {\r\n            name: 'Number',\r\n            //Temp hack\r\n            checked: colDef.type === 'numericColumn',\r\n            action: () => dispatch(setFieldType(colDef.field!, 'number')),\r\n          },\r\n        ],\r\n      },\r\n    ]\r\n    return (params.defaultItems as any[]).concat(items)\r\n  }\r\n\r\n  const getContextMenuItems = (params: GetContextMenuItemsParams) => {\r\n    const commands = [\r\n      deleteRowsCommand(dispatch, params), //..\r\n    ]\r\n    return (params.defaultItems as any[]).concat(commands)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {ready ? (\r\n        <div className=\"ag-theme-balham\" css={styles.grid}>\r\n          <AgGridReact\r\n            columnDefs={columns}\r\n            defaultColDef={{\r\n              editable: true,\r\n              resizable: true,\r\n              sortable: true,\r\n              filter: true,\r\n              valueSetter,\r\n              valueParser,\r\n            }}\r\n            rowData={rowCollection}\r\n            deltaRowDataMode={true}\r\n            getRowNodeId={(item) => item.id}\r\n            onCellKeyDown={handleKeyDown}\r\n            onModelUpdated={handleModelUpdated}\r\n            getMainMenuItems={getMainMenu}\r\n            enableRangeSelection={true}\r\n            enterMovesDown={true}\r\n            enterMovesDownAfterEdit={true}\r\n            getContextMenuItems={getContextMenuItems}\r\n            rowDeselection={true}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <Loading />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  grid: css({\r\n    flexGrow: 5,\r\n    height: '100vh',\r\n  }),\r\n}\r\n","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\Toolbar.tsx",[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\redux\\actions.ts",[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\ag-grid\\buildColumnFromSchema.ts",[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\ag-grid\\commands\\deleteRowsCommand.ts",[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\DataGenerator.tsx",[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\inferSchema.ts",[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\utils\\nextFrame.ts",[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\dataGenerator.worker.ts",["92"],"﻿import { randomRow } from '../utils/randomRow'\r\ndeclare const self: Worker\r\n\r\nself.addEventListener('message', async e => {\r\n  const collection = [] as any[]\r\n  const rows = +e.data\r\n  for (let i = 0; i < rows; i++) {\r\n    const item = randomRow()\r\n    collection.push(item)\r\n    if (Number.isInteger((i / rows) * 100)) self.postMessage({ progress: i })\r\n  }\r\n  self.postMessage({ result: collection })\r\n})\r\n\r\nexport default {} as typeof Worker & { new (): Worker }\r\n",[],"C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\dataGeneratorSchema.tsx",["93"],"import { JSONSchema7 } from 'json-schema'\r\n\r\nexport const dataGeneratorSchema = {\r\n  type: 'object',\r\n  properties: {\r\n    name: {},\r\n    email: { format: 'email' },\r\n    age: { type: 'number' },\r\n    street: {},\r\n    city: {},\r\n    state: {},\r\n    zip: {},\r\n    gender: {},\r\n    latitude: {},\r\n    longitude: {},\r\n    paragraph: {},\r\n    displayOrder: { type: 'number' },\r\n  },\r\n} as JSONSchema7\r\n","C:\\git\\local-first-web\\state\\examples\\grid\\src\\components\\ProgressBar.tsx",["94"],"﻿/** @jsxImportSource @emotion/react */\r\n\r\nexport const ProgressBar = ({ width = 100, height = 20, percentComplete }: ProgressBarProps) => (\r\n  <div css={{ background: '#ddd', width, height, borderRadius: 3, marginTop: (30 - height) / 2 }}>\r\n    <div\r\n      css={{\r\n        background: 'orange',\r\n        width: (width * percentComplete) / 100,\r\n        height,\r\n        borderRadius: 3,\r\n      }}\r\n    />\r\n  </div>\r\n)\r\n\r\nexport interface ProgressBarProps {\r\n  percentComplete: number\r\n  width?: number\r\n  height?: number\r\n}\r\n","C:\\git\\local-first-web\\state\\examples\\grid\\src\\ag-grid\\gridUtils.ts",["95"],"﻿import { GridApi, CellRange, RowNode } from 'ag-grid-community'\r\nimport * as R from 'ramda'\r\n\r\nexport const getRowIndexesFromCellRange = (cellRange: CellRange) => {\r\n  const startRowIndex = cellRange.startRow!.rowIndex\r\n  const endRowIndex = cellRange.endRow!.rowIndex + 1\r\n  return R.range(startRowIndex, endRowIndex)\r\n}\r\n\r\nexport const getDistinctIndexesFromCellRanges = (cellRanges: CellRange[]) =>\r\n  R.uniq(R.flatten(cellRanges.map(getRowIndexesFromCellRange)))\r\n\r\nexport const getRowIdFromIndex = (api: GridApi) => (i: number) => api.getModel().getRow(i)!.id\r\n\r\nexport const getSelectedRowIds = (api: GridApi, node: RowNode) =>\r\n  api.getCellRanges().length\r\n    ? getDistinctIndexesFromCellRanges(api.getCellRanges()).map(getRowIdFromIndex(api))\r\n    : [node.data.id]\r\n",{"ruleId":null,"fatal":true,"severity":2,"message":"96","line":6,"column":38},{"ruleId":null,"fatal":true,"severity":2,"message":"97","line":71,"column":48},{"ruleId":null,"fatal":true,"severity":2,"message":"98","line":13,"column":46},{"ruleId":null,"fatal":true,"severity":2,"message":"99","line":56,"column":28},{"ruleId":null,"fatal":true,"severity":2,"message":"100","line":2,"column":9},{"ruleId":null,"fatal":true,"severity":2,"message":"101","line":19,"column":3},{"ruleId":null,"fatal":true,"severity":2,"message":"102","line":18,"column":3},{"ruleId":null,"fatal":true,"severity":2,"message":"103","line":5,"column":43},"Parsing error: Unexpected token, expected \";\"\n\n\u001b[0m \u001b[90m 4 | \u001b[39m\u001b[36mimport\u001b[39m { \u001b[33mGridState\u001b[39m } from \u001b[32m'types'\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 5 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 6 | \u001b[39m\u001b[36mconst\u001b[39m initialState \u001b[33m=\u001b[39m emptyGrid(\u001b[35m3\u001b[39m\u001b[33m,\u001b[39m \u001b[35m3\u001b[39m) as \u001b[33mGridState\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   | \u001b[39m                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 7 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 8 | \u001b[39m\u001b[36mconst\u001b[39m urls \u001b[33m=\u001b[39m process\u001b[33m.\u001b[39menv\u001b[33m.\u001b[39m\u001b[33mREACT_APP_RELAYS\u001b[39m \u001b[33m?\u001b[39m process\u001b[33m.\u001b[39menv\u001b[33m.\u001b[39m\u001b[33mREACT_APP_RELAYS\u001b[39m\u001b[33m.\u001b[39msplit(\u001b[32m','\u001b[39m) \u001b[33m:\u001b[39m undefined\u001b[0m\n\u001b[0m \u001b[90m 9 | \u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \";\"\n\n\u001b[0m \u001b[90m 69 | \u001b[39m    \u001b[36mcase\u001b[39m actions\u001b[33m.\u001b[39m\u001b[33mFIELD_RENAME\u001b[39m\u001b[33m:\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 70 | \u001b[39m      \u001b[36mreturn\u001b[39m (s) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 71 | \u001b[39m        \u001b[36mconst\u001b[39m fieldSchema \u001b[33m=\u001b[39m s\u001b[33m.\u001b[39mschema\u001b[33m.\u001b[39mproperties\u001b[33m!\u001b[39m[payload\u001b[33m.\u001b[39mid] as \u001b[33mJSONSchema7\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 72 | \u001b[39m        fieldSchema\u001b[33m.\u001b[39mdescription \u001b[33m=\u001b[39m payload\u001b[33m.\u001b[39mdescription\u001b[0m\n\u001b[0m \u001b[90m 73 | \u001b[39m      }\u001b[0m\n\u001b[0m \u001b[90m 74 | \u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \"]\"\n\n\u001b[0m \u001b[90m 11 | \u001b[39m  })\u001b[0m\n\u001b[0m \u001b[90m 12 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 13 | \u001b[39m  \u001b[36mconst\u001b[39m columnReducer \u001b[33m=\u001b[39m (colMap\u001b[33m:\u001b[39m \u001b[33mJSONSchema7\u001b[39m[\u001b[32m'properties'\u001b[39m]\u001b[33m,\u001b[39m id\u001b[33m:\u001b[39m string\u001b[33m,\u001b[39m i\u001b[33m:\u001b[39m number) \u001b[33m=>\u001b[39m ({\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 14 | \u001b[39m    \u001b[33m...\u001b[39mcolMap\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 15 | \u001b[39m    [id]\u001b[33m:\u001b[39m { description\u001b[33m:\u001b[39m \u001b[32m`Field ${i + 1}`\u001b[39m }\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 16 | \u001b[39m  })\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 54 | \u001b[39m  \u001b[36mconst\u001b[39m handleKeyDown \u001b[33m=\u001b[39m (event\u001b[33m:\u001b[39m \u001b[33mCellKeyPressEvent\u001b[39m) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 55 | \u001b[39m    \u001b[36mif\u001b[39m (event\u001b[33m.\u001b[39mevent) {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 56 | \u001b[39m      \u001b[36mswitch\u001b[39m ((event\u001b[33m.\u001b[39mevent as \u001b[33mKeyboardEvent\u001b[39m)\u001b[33m.\u001b[39mkey) {\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m                           \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 57 | \u001b[39m        \u001b[36mcase\u001b[39m \u001b[32m'ArrowDown'\u001b[39m\u001b[33m:\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 58 | \u001b[39m        \u001b[36mcase\u001b[39m \u001b[32m'Enter'\u001b[39m\u001b[33m:\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 59 | \u001b[39m          \u001b[36mif\u001b[39m (event\u001b[33m.\u001b[39mrowIndex \u001b[33m===\u001b[39m rowCollection\u001b[33m.\u001b[39mlength \u001b[33m-\u001b[39m \u001b[35m1\u001b[39m) {\u001b[0m","Parsing error: Unexpected token, expected \";\"\n\n\u001b[0m \u001b[90m 1 | \u001b[39m\u001b[36mimport\u001b[39m { randomRow } from \u001b[32m'../utils/randomRow'\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 2 | \u001b[39mdeclare \u001b[36mconst\u001b[39m self\u001b[33m:\u001b[39m \u001b[33mWorker\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   | \u001b[39m        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 3 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 | \u001b[39mself\u001b[33m.\u001b[39maddEventListener(\u001b[32m'message'\u001b[39m\u001b[33m,\u001b[39m async e \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 5 | \u001b[39m  \u001b[36mconst\u001b[39m collection \u001b[33m=\u001b[39m [] as any[]\u001b[0m","Parsing error: Unexpected token, expected \";\"\n\n\u001b[0m \u001b[90m 17 | \u001b[39m    displayOrder\u001b[33m:\u001b[39m { type\u001b[33m:\u001b[39m \u001b[32m'number'\u001b[39m }\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 18 | \u001b[39m  }\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 19 | \u001b[39m} as \u001b[33mJSONSchema7\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 20 | \u001b[39m\u001b[0m","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 16 | \u001b[39m\u001b[36mexport\u001b[39m interface \u001b[33mProgressBarProps\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m 17 | \u001b[39m  percentComplete\u001b[33m:\u001b[39m number\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 18 | \u001b[39m  width\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m number\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m  \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 19 | \u001b[39m  height\u001b[33m?\u001b[39m\u001b[33m:\u001b[39m number\u001b[0m\n\u001b[0m \u001b[90m 20 | \u001b[39m}\u001b[0m\n\u001b[0m \u001b[90m 21 | \u001b[39m\u001b[0m","Parsing error: Unexpected token, expected \";\"\n\n\u001b[0m \u001b[90m 3 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 | \u001b[39m\u001b[36mexport\u001b[39m \u001b[36mconst\u001b[39m getRowIndexesFromCellRange \u001b[33m=\u001b[39m (cellRange\u001b[33m:\u001b[39m \u001b[33mCellRange\u001b[39m) \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 5 | \u001b[39m  \u001b[36mconst\u001b[39m startRowIndex \u001b[33m=\u001b[39m cellRange\u001b[33m.\u001b[39mstartRow\u001b[33m!\u001b[39m\u001b[33m.\u001b[39mrowIndex\u001b[0m\n\u001b[0m \u001b[90m   | \u001b[39m                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 6 | \u001b[39m  \u001b[36mconst\u001b[39m endRowIndex \u001b[33m=\u001b[39m cellRange\u001b[33m.\u001b[39mendRow\u001b[33m!\u001b[39m\u001b[33m.\u001b[39mrowIndex \u001b[33m+\u001b[39m \u001b[35m1\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 7 | \u001b[39m  \u001b[36mreturn\u001b[39m \u001b[33mR\u001b[39m\u001b[33m.\u001b[39mrange(startRowIndex\u001b[33m,\u001b[39m endRowIndex)\u001b[0m\n\u001b[0m \u001b[90m 8 | \u001b[39m}\u001b[0m"]